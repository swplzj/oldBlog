<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李振杰]]></title>
  <link href="http://swplzj.github.io/atom.xml" rel="self"/>
  <link href="http://swplzj.github.io/"/>
  <updated>2015-02-12T10:40:10+08:00</updated>
  <id>http://swplzj.github.io/</id>
  <author>
    <name><![CDATA[LeeZhenjie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[1215]]></title>
    <link href="http://swplzj.github.io/blog/2014/12/14/1215/"/>
    <updated>2014-12-14T19:02:27+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/12/14/1215</id>
    <content type="html"><![CDATA[<p>The Greatest Love Of All</p>

<p>I believe the children is our future</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wo]]></title>
    <link href="http://swplzj.github.io/blog/2014/12/14/wo/"/>
    <updated>2014-12-14T17:30:40+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/12/14/wo</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tenth_blog]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/21/tenth-blog/"/>
    <updated>2014-09-21T21:34:12+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/21/tenth-blog</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[接口实例]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/21/jie-kou-shi-li/"/>
    <updated>2014-09-21T18:31:05+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/21/jie-kou-shi-li</id>
    <content type="html"><![CDATA[<h1>categ</h1>

<hr />

<h3>获取商城分类列表</h3>

<p><code>接口URL</code></p>

<h4><a href="http:/www.categ.php">http:/www.categ.php</a></h4>

<p><code>HTTP请求方式</code></p>

<h4>POST</h4>

<p><code>请求参数</code></p>

<table>
<thead>
<tr>
<th style="text-align:left;">请求参数  </th>
<th style="text-align:left;">   类型及范围     </th>
<th style="text-align:left;">   说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">request </td>
<td style="text-align:left;"> String            </td>
<td style="text-align:left;">   请求接口名称</td>
</tr>
</tbody>
</table>


<!--more-->


<p><code>返回结果 — 成功</code></p>

<pre><code>{
"response": "categ",
"category": [
    {
        "id": "129",
        "name": "手机数码",
        "cat_thumb": "images/category/small_pic/129.png",
        "url": "category.php",
        "cat_id": [
            {
                "id": "130",
                "name": "手机",
                "url": "category.php",
                "cat_id": [
                    {
                        "id": "146",
                        "name": "苹果",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "147",
                        "name": "三星",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "148",
                        "name": "小米",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "149",
                        "name": "红米",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "150",
                        "name": "魅族",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "151",
                        "name": "华为",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "180",
                        "name": "NIT",
                        "url": "category.php",
                        "cat_id": []
                    }
                ]
            },
            {
                "id": "131",
                "name": "电脑",
                "url": "category.php",
                "cat_id": [
                    {
                        "id": "152",
                        "name": "苹果",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "153",
                        "name": "三星",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "171",
                        "name": "联想",
                        "url": "category.php",
                        "cat_id": []
                    }
                ]
            },
            {
                "id": "132",
                "name": "耳机/音箱",
                "url": "category.php",
                "cat_id": [
                    {
                        "id": "154",
                        "name": "JBL",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "155",
                        "name": "法拉利",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "156",
                        "name": "Beats",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "157",
                        "name": "PRECISION",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "165",
                        "name": "Aftershokz",
                        "url": "category.php",
                        "cat_id": []
                    }
                ]
            },
            {
                "id": "164",
                "name": "移动电源",
                "url": "category.php",
                "cat_id": []
            }
        ]
    },
    {
        "id": "120",
        "name": "创意生活",
        "cat_thumb": "images/category/small_pic/120.png",
        "url": "category.php",
        "cat_id": [
            {
                "id": "160",
                "name": "wavebetter",
                "url": "category.php",
                "cat_id": []
            },
            {
                "id": "161",
                "name": "莱克",
                "url": "category.php",
                "cat_id": []
            },
            {
                "id": "162",
                "name": "小黑伞",
                "url": "category.php",
                "cat_id": []
            }
        ]
    },
    {
        "id": "67",
        "name": "运动户外",
        "cat_thumb": "images/category/small_pic/67.png",
        "url": "category.php",
        "cat_id": [
            {
                "id": "80",
                "name": "智能穿戴",
                "url": "category.php",
                "cat_id": []
            },
            {
                "id": "145",
                "name": "户外休闲",
                "url": "category.php",
                "cat_id": [
                    {
                        "id": "158",
                        "name": "INUK",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "159",
                        "name": "海马",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "166",
                        "name": "新秀丽",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "167",
                        "name": "威戈",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "169",
                        "name": "外交官",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "170",
                        "name": "哆啦A梦",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "182",
                        "name": "H2X",
                        "url": "category.php",
                        "cat_id": []
                    },
                    {
                        "id": "190",
                        "name": "NBA",
                        "url": "category.php",
                        "cat_id": []
                    }
                ]
            }
        ]
    },
    {
        "id": "116",
        "name": "时尚奢品",
        "cat_thumb": "images/category/small_pic/116.png",
        "url": "category.php",
        "cat_id": [
            {
                "id": "117",
                "name": "手提包/钱包",
                "url": "category.php",
                "cat_id": [
                    {
                        "id": "172",
                        "name": "COACH",
                        "url": "category.php",
                        "cat_id": []
                    }
                ]
            },
            {
                "id": "118",
                "name": "手表",
                "url": "category.php",
                "cat_id": [
                    {
                        "id": "173",
                        "name": "EMPORIO ARMANI",
                        "url": "category.php",
                        "cat_id": []
                    }
                ]
            },
            {
                "id": "119",
                "name": "皮带",
                "url": "category.php",
                "cat_id": []
            }
        ]
    },
    {
        "id": "125",
        "name": "家居用品",
        "cat_thumb": "images/category/small_pic/125.png",
        "url": "category.php",
        "cat_id": [
            {
                "id": "163",
                "name": "欧姆龙",
                "url": "category.php",
                "cat_id": []
            }
        ]
    },
    {
        "id": "112",
        "name": "汽车周边",
        "cat_thumb": "images/category/small_pic/112.png",
        "url": "category.php",
        "cat_id": [
            {
                "id": "113",
                "name": "JBL",
                "url": "category.php",
                "cat_id": []
            },
            {
                "id": "189",
                "name": "NBA",
                "url": "category.php",
                "cat_id": []
            }
        ]
    }
]
}
</code></pre>

<p><code>参数说明</code></p>

<p>参数名称            |   说明    <br/>
:&mdash;&mdash;&mdash;&mdash;&ndash; | :&mdash;&mdash;&mdash;&mdash;-
response        | 响应接口结果
category        | 商城商
id              | 商品
name            | 商品
cat_thumb       | 商品
url             | 商品
cat_id          | 商品
<code>返回结果 — 失败</code></p>

<pre><code>{
    "response":"error"
}
</code></pre>

<p><code>参数说明</code></p>

<table>
<thead>
<tr>
<th style="text-align:left;">参数名称            </th>
<th style="text-align:left;">   说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">response        </td>
<td style="text-align:left;"> 响应接口结果</td>
</tr>
</tbody>
</table>


<p><a href="error_code.html">返回错误，详见错误代码页</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更换主题]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/21/geng-huan-zhu-ti/"/>
    <updated>2014-09-21T16:47:01+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/21/geng-huan-zhu-ti</id>
    <content type="html"><![CDATA[<p>我更换了一个主题</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modify]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/18/modify/"/>
    <updated>2014-09-18T13:42:04+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/18/modify</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five_blog]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/17/five-blog/"/>
    <updated>2014-09-17T20:33:17+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/17/five-blog</id>
    <content type="html"><![CDATA[<p>这是第五篇博客</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fourth_blog]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/17/fourth-blog/"/>
    <updated>2014-09-17T19:03:45+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/17/fourth-blog</id>
    <content type="html"><![CDATA[<p>这是第四篇博客</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Third_blog]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/17/third-blog/"/>
    <updated>2014-09-17T18:54:32+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/17/third-blog</id>
    <content type="html"><![CDATA[<p>第三篇博客</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Second]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/17/second/"/>
    <updated>2014-09-17T17:29:15+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/17/second</id>
    <content type="html"><![CDATA[<p>这是我发布的第二遍博客</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建博客操作]]></title>
    <link href="http://swplzj.github.io/blog/2014/09/17/firstblog/"/>
    <updated>2014-09-17T14:26:01+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/09/17/firstblog</id>
    <content type="html"><![CDATA[<p>终于搭建好自己的博客了，搭建过程中遇到好多问题，参考了好多文章，创建博客所用到的操作记录下来留作纪念。</p>

<p><a href="http://blog.segmentfault.com/yaashion_xiang/1190000000364677">搭建博客参考的文章</a></p>

<p><a href="https://github.com/imathis/octopress/wiki">官方参考文档</a></p>

<!--more-->


<h4>创建一篇博文</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["post title"] #octopress 将在工作目录的 source/_post/目录下生成相应的 markdown 文件。然后可以使用 mou 工具去修改编辑内容。</span></code></pre></td></tr></table></div></figure>


<h4>生成预览</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview #可以通过 localhost:4000 在本机实时观察最新的编辑效果。</span></code></pre></td></tr></table></div></figure>


<h4>在线发布</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy #完成编辑后，可以将最新的内容部署到 github 上去。成功后，即可在线访问。</span></code></pre></td></tr></table></div></figure>


<h4>向 github 提交源文件更新</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add -A
</span><span class='line'>git commit -m :"提交内容"
</span><span class='line'>git push</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages
</span><span class='line'>生成静态站点：rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<h4>提交源文件，即source分支</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h4>克隆主题</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd Octopress  
</span><span class='line'>git clone https://github.com/sevenadrian/foxslide .themes/foxslide  
</span><span class='line'>rake install['foxslide']  
</span><span class='line'>rake generate  
</span><span class='line'>rake deploy 
</span><span class='line'>cd octopress
</span><span class='line'>git submodule add GIT_URL .themes/THEME_NAME
</span><span class='line'>rake install['THEME_NAME']
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<h4>拉取master分支</h4>

<p>进入_deploy目录，运行如下命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull origin master  </span></code></pre></td></tr></table></div></figure>


<h4>在开始处理博客事务之前，需要同步github仓库的数据</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd Octopress/  
</span><span class='line'>git pull origin source  
</span><span class='line'>cd _deploy  
</span><span class='line'>git commit --amend 
</span><span class='line'>git rebase.</span></code></pre></td></tr></table></div></figure>


<h5>因为你是从octopress github上clone的，所以你需要把origin这个branch换一个名字</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote rename origin octopress  
</span><span class='line'>git remote add origin (your github url)  </span></code></pre></td></tr></table></div></figure>


<h4>把你的github branch作为默认的branch</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config branch.master.remote origin  </span></code></pre></td></tr></table></div></figure>


<h4>把你的octopress导入到github上去</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push -u origin master  </span></code></pre></td></tr></table></div></figure>


<h6>添加继续阅读</h6>

<p>需要在文章中写<!--more--></p>

<h6>Octopress添加回到顶部功能</h6>

<p><a href="http://www.tuicool.com/articles/qu6ZfiV">http://www.tuicool.com/articles/qu6ZfiV</a></p>

<h4>添加分页功能</h4>

<p><a href="http://www.tuicool.com/articles/mIVJ7j">http://www.tuicool.com/articles/mIVJ7j</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCODE LLDB命令的简单实用说明]]></title>
    <link href="http://swplzj.github.io/blog/2014/07/21/geng-huan-zhu-ti%20copy/"/>
    <updated>2014-07-21T16:47:01+08:00</updated>
    <id>http://swplzj.github.io/blog/2014/07/21/geng-huan-zhu-ti copy</id>
    <content type="html"><![CDATA[<p>po（print object）是LLDB的一个命令，其主要功能是输出objective-c中对象（objects）的信息，与之相似的另外一个命令是 p（print），其主要功能是输出原生类型（boolean、integer、float、etc）的信息。</p>

<p>可以在控制台输入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>po self.view 或者
</span><span class='line'>p self.view.subViews.count</span></code></pre></td></tr></table></div></figure>


<h4>技巧一：运行时修改变量的值</h4>

<p>你以前怎么验证是不是某个变量的值导致整段程序不能正常工作？修改代码中的变量的值，然后cmd+r重新启动app？现在你不需要这么做了，只需要设置一个断点，当程序在这进入调试模式后，使用expr命令即可在运行时修改变量的值。</p>

<p>假如有一个loginWithUsername:方法，需要两个参数：username，password。</p>

<p>首先设置好断点，如下图所示：</p>

<p><img src="230128_xFae_724414.png" alt="ImageDemo" /></p>

<p>运行app，进入断点模式后，在（lldb）后输入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expr username = @"username"
</span><span class='line'>expr password = @"badpassword"</span></code></pre></td></tr></table></div></figure>


<p>控制台会返回以下信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(NSString *) $0 = 0x3d3504c4 @"username"
</span><span class='line'>(NSString *) $1 = 0x1d18ef60 @"badpassword"</span></code></pre></td></tr></table></div></figure>


<p>现在跳出断点，执行断点之后的两条输出语句，控制台会有以下输出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(0x1c59aae0) A line for the breakpoint
</span><span class='line'>(0x1c59aae0) Username and Password after: username:badpassword</span></code></pre></td></tr></table></div></figure>


<p>看到看吧，我们在运行时修改了变量的值，事情还可以变的更简单一些，我们可以编辑断点，让它自动填充需要的修改的变量的值，并且可以选择在此断点处不进入断点模式，仅仅修改指定变量的值，然后自动执行后续代码。</p>

<p>右击断点选择“Edit Breakpoint…”（或者按住cmd+option，单击断点），然后如下图所示设置断点</p>

<p>注意选中了最后一行（“Automatically continue after evaluating”）的选择框，这就保证运行到这个断点的时，填充变量的值，然后继续运行，并不在此处断点进入调试模式。</p>

<p>运行app，你会得到和上述手动设置变量的值一样的输出。</p>

<p>接下来单击断点，使其处于禁用状态，现在箭头的颜色应该是浅蓝色的，重新运行app，你会发现username和password的值没有在运行时被改变了。</p>

<h4>技巧二：设置断点触发条件</h4>

<p>断点的另外一个重要作用，是可以设置触发断点生效的条件，这样我们就可以在运行时针对特定的数据进行分析，观察app是否运行在正确的轨道上。如下图：</p>

<p>上述截图可以看到如下语句</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(BOOL)[(NSString*)[item valueForKey:@"ID"] isEqualToString:@"93306"]</span></code></pre></td></tr></table></div></figure>


<p>通过这行语句，我们告诉编译器：当item中ID等于93306时，此断点生效，进入断点调试模式。</p>

<h4>技巧三：格式化输出数据</h4>

<p>如果你厌倦了代码里无穷无尽的NSLog，幸运的是我们可以在编辑断点使其输出格式化字符串就像平常编码时一样。不过有一点需要注意，平常编码时可能会使用NSString‘s stringWithFormat:输出格式化字符串，不过这个方法貌似在断点中木有效果，你需要使用alloc/init形式的方法，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>po [[NSString alloc] initWithFormat:@"Item index is: %d", index]</span></code></pre></td></tr></table></div></figure>


<p>运行app，就能在控制台看到想要的输出啦！</p>

<p>简单！强大！这就是LLDB给你的选择，从此代码里可以不用再有NSLog满天飞的情况了，代码变得更干净了，心情变得更愉悦了！</p>

<p>LLDB还有很多强大的地方，本教程只不过揭开了它的面纱，即便如此，仍让我们沉醉不已。</p>

<h4>另附命令合集</h4>

<p>apropos           — Find a list of debugger commands related to a particular
                        word/subject.</p>

<p>  breakpoint        — A set of commands for operating on breakpoints. Also see
                       _regexp-break.</p>

<p>  command           — A set of commands for managing or customizing the
                       debugger commands.</p>

<p>  disassemble       — Disassemble bytes in the current function, or elsewhere
                       in the executable program as specified by the user.</p>

<p>  expression        — Evaluate a C/ObjC/C++ expression in the current program
                       context, using user defined variables and variables
                       currently in scope.</p>

<p>  frame             — A set of commands for operating on the current thread’s
                       frames.</p>

<p>  gdb-remote        — Connect to a remote GDB server.  If no hostname is
                       provided, localhost is assumed.</p>

<p>  gui               — Switch into the curses based GUI mode.</p>

<p>  help              — Show a list of all debugger commands, or give details
                       about specific commands.</p>

<p>  kdp-remote        — Connect to a remote KDP server.  udp port 41139 is the
                       default port number.</p>

<p>  log               — A set of commands for operating on logs.</p>

<p>  memory            — A set of commands for operating on memory.</p>

<p>  platform          — A set of commands to manage and create platforms.</p>

<p>  plugin            — A set of commands for managing or customizing plugin
                       commands.</p>

<p>  process           — A set of commands for operating on a process.</p>

<p>  quit              — Quit out of the LLDB debugger.</p>

<p>  register          — A set of commands to access thread registers.</p>

<p>  script            — Pass an expression to the script interpreter for
                       evaluation and return the results. Drop into the
                       interactive interpreter if no expression is given.</p>

<p>  settings          — A set of commands for manipulating internal settable
                       debugger variables.</p>

<p>  source            — A set of commands for accessing source file information</p>

<p>  target            — A set of commands for operating on debugger targets.</p>

<p>  thread            — A set of commands for operating on one or more threads
                       within a running process.</p>

<p>  type              — A set of commands for operating on the type system</p>

<p>  version           — Show version of LLDB debugger.</p>

<p>  watchpoint        — A set of commands for operating on watchpoints.</p>

<p>Current command abbreviations (type ‘help command alias’ for more info):</p>

<p>  add-dsym  — (‘target symbols add’)  Add a debug symbol file to one of the
               target’s current modules by specifying a path to a debug symbols
               file, or using the options to specify a module to download
               symbols for.</p>

<p>  attach    — (‘_regexp-attach’)  Attach to a process id if in decimal,
               otherwise treat the argument as a process name to attach to.</p>

<p>  b         — (‘_regexp-break’)  Set a breakpoint using a regular expression
               to specify the location, where <linenum> is in decimal and
               <address> is in hex.</p>

<p>  bt        — (‘_regexp-bt’)  Show a backtrace.  An optional argument is
               accepted; if that argument is a number, it specifies the number
               of frames to display.  If that argument is ‘all’, full
               backtraces of all threads are displayed.</p>

<p>  c         — (‘process continue’)  Continue execution of all threads in the
               current process.</p>

<p>  call      — (‘expression –’)  Evaluate a C/ObjC/C++ expression in the
               current program context, using user defined variables and
               variables currently in scope.</p>

<p>  continue  — (‘process continue’)  Continue execution of all threads in the
               current process.</p>

<p>  detach    — (‘process detach’)  Detach from the current process being
               debugged.</p>

<p>  di        — (‘disassemble’)  Disassemble bytes in the current function, or
               elsewhere in the executable program as specified by the user.</p>

<p>  dis       — (‘disassemble’)  Disassemble bytes in the current function, or
               elsewhere in the executable program as specified by the user.</p>

<p>  display   — (‘_regexp-display’)  Add an expression evaluation stop-hook.</p>

<p>  down      — (‘_regexp-down’)  Go down “n” frames in the stack (1 frame by
               default).</p>

<p>  env       — (‘_regexp-env’)  Implements a shortcut to viewing and setting
               environment variables.</p>

<p>  exit      — (‘quit’)  Quit out of the LLDB debugger.</p>

<p>  f         — (‘frame select’)  Select a frame by index from within the
               current thread and make it the current frame.</p>

<p>  file      — (‘target create’)  Create a target using the argument as the
               main executable.</p>

<p>  finish    — (‘thread step-out’)  Finish executing the function of the
               currently selected frame and return to its call site in
               specified thread (current thread, if none specified).</p>

<p>  image     — (‘target modules’)  A set of commands for accessing information
               for one or more target modules.</p>

<p>  j         — (‘_regexp-jump’)  Sets the program counter to a new address.</p>

<p>  jump      — (‘_regexp-jump’)  Sets the program counter to a new address.</p>

<p>  kill      — (‘process kill’)  Terminate the current process being debugged.</p>

<p>  l         — (‘_regexp-list’)  Implements the GDB ‘list’ command in all of
               its forms except FILE:FUNCTION and maps them to the appropriate
               ‘source list’ commands.</p>

<p>  list      — (‘_regexp-list’)  Implements the GDB ‘list’ command in all of
               its forms except FILE:FUNCTION and maps them to the appropriate
               ‘source list’ commands.</p>

<p>  n         — (‘thread step-over’)  Source level single step in specified
               thread (current thread, if none specified), stepping over
               calls.</p>

<p>  next      — (‘thread step-over’)  Source level single step in specified
               thread (current thread, if none specified), stepping over
               calls.</p>

<p>  nexti     — (‘thread step-inst-over’)  Single step one instruction in
               specified thread (current thread, if none specified), stepping
               over calls.</p>

<p>  ni        — (‘thread step-inst-over’)  Single step one instruction in
               specified thread (current thread, if none specified), stepping
               over calls.</p>

<p>  p         — (‘expression –’)  Evaluate a C/ObjC/C++ expression in the
               current program context, using user defined variables and
               variables currently in scope.</p>

<p>  po        — (‘expression -O  — ‘)  Evaluate a C/ObjC/C++ expression in the
               current program context, using user defined variables and
               variables currently in scope.</p>

<p>  print     — (‘expression –’)  Evaluate a C/ObjC/C++ expression in the
               current program context, using user defined variables and
               variables currently in scope.</p>

<p>  q         — (‘quit’)  Quit out of the LLDB debugger.</p>

<p>  r         — (‘process launch -c /bin/sh –’)  Launch the executable in the
               debugger.</p>

<p>  rbreak    — (‘breakpoint set -r %1′)  Sets a breakpoint or set of
               breakpoints in the executable.</p>

<p>  repl      — (‘expression -r  — ‘)  Evaluate a C/ObjC/C++ expression in the
               current program context, using user defined variables and
               variables currently in scope.</p>

<p>  run       — (‘process launch -c /bin/sh –’)  Launch the executable in the
               debugger.</p>

<p>  s         — (‘thread step-in’)  Source level single step in specified thread=
               (current thread, if none specified).</p>

<p>  si        — (‘thread step-inst’)  Single step one instruction in specified
               thread (current thread, if none specified).</p>

<p>  step      — (‘thread step-in’)  Source level single step in specified thread
               (current thread, if none specified).</p>

<p>  stepi     — (‘thread step-inst’)  Single step one instruction in specified
               thread (current thread, if none specified).</p>

<p>  t         — (‘thread select’)  Select a thread as the currently active
               thread.</p>

<p>  tbreak    — (‘_regexp-tbreak’)  Set a one shot breakpoint using a regular
               expression to specify the location, where <linenum> is in
               decimal and <address> is in hex.</p>

<p>  undisplay — (‘_regexp-undisplay’)  Remove an expression evaluation
               stop-hook.</p>

<p>  up        — (‘_regexp-up’)  Go up “n” frames in the stack (1 frame by
               default).</p>

<p>  x         — (‘memory read’)  Read from the memory of the process being
               debug</p>
]]></content>
  </entry>
  
</feed>
