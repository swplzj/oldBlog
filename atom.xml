<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[李振杰]]></title>
  <link href="http://swplzj.github.io/atom.xml" rel="self"/>
  <link href="http://swplzj.github.io/"/>
  <updated>2015-02-13T18:31:42+08:00</updated>
  <id>http://swplzj.github.io/</id>
  <author>
    <name><![CDATA[LeeZhenjie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac下搭建svn环境]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/macxia-da-jian-svnhuan-jing/"/>
    <updated>2015-02-13T17:35:14+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/macxia-da-jian-svnhuan-jing</id>
    <content type="html"><![CDATA[<p>在Windows环境中，我们一般使用TortoiseSVN来搭建svn环境。在Mac环境下，由于Mac自带了svn的服务器端和客户端功能，所以我们可以在不装任何第三方软件的前提下使用svn功能，不过还需做一下简单的配置。</p>

<p>我们首先来看下，如何在Mac环境下搭建svn服务器端环境。</p>

<!--more-->


<h5>一、创建代码仓库，用来存储客户端所上传的代码</h5>

<p>我先在/User/apple目录下新建一个svn目录，以后可以在svn目录下创建多个仓库目录</p>

<p>打开终端，创建一个mycode仓库，输入指令：svnadmin create /Users/apple/svn/mycode</p>

<p>指令执行成功后，会发现硬盘上多了个/Users/apple/svn/mycode目录，目录结构如下：</p>

<p><img src="http://images.cnitblog.com/blog/497279/201303/10002140-c4cf85b829bd477ea3a3779a4cd0d7fd.png" alt="id1" /></p>

<h5>二、配置svn的用户权限</h5>

<p>主要是修改/svn/mycode/conf目录下的三个文件</p>

<h6>1.打开svnserve.conf，将下列配置项前面的#和空格都去掉</h6>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># anon-access = read
</span><span class='line'>
</span><span class='line'># auth-access = write
</span><span class='line'>
</span><span class='line'># password-db = passwd
</span><span class='line'>
</span><span class='line'># authz-db = authz</span></code></pre></td></tr></table></div></figure>


<p>anon-access = read代表匿名访问的时候是只读的，若改为anon-access = none代表禁止匿名访问，需要帐号密码才能访问</p>

<h6>2.打开passwd，在[users]下面添加帐号和密码</h6>

<p>[users]
mj=123
jj=456
帐号是mj，密码是123</p>

<h6>3.打开authz，配置用户组和权限</h6>

<p>我们可以将在passwd里添加的用户分配到不同的用户组里，以后的话，就可以对不同用户组设置不同的权限，没有必要对每个用户进行单独设置权限。</p>

<p>在[groups]下面添加组名和用户名，多个用户之间用逗号(,)隔开</p>

<p>[groups]
topgroup=mj,jj
说明mj和jj都是属于topgroup这个组的，接下来再进行权限配置。</p>

<p>使用[/]代表svn服务器中的所有资源库</p>

<p>[/]
@topgroup=rw上面的配置说明topgroup这个组中的所有用户对所有资源库都有读写(rw)权限，组名前面要用@</p>

<p>如果是用户名，不用加@，比如mj这个用户有读写权限</p>

<p>[/]
mj=rw
至于其他精细的权限控制，可以参考authz文件中的其他内容</p>

<h6>4.启动svn服务器</h6>

<p>前面配置了这么多，最关键还是看能否正常启动服务器，若启动不来，前面做再多工作也是徒劳。</p>

<p>在终端输入下列指令：svnserve -d -r /Users/apple/svn</p>

<p>或者输入：svnserve -d -r /Users/apple/svn/mycode</p>

<p>没有任何提示就说明启动成功了</p>

<h6>5.关闭svn服务器</h6>

<p>如果你想要关闭svn服务器，最有效的办法是打开实用工具里面的“活动监视器”</p>

<p><img src="http://images.cnitblog.com/blog/497279/201303/10010442-37644dc2b0d54f7b8b421ede25d2f749.png" alt="id3" /></p>

<p>这里列出一大堆svn指令，后面括号中的内容的一般代表着指令的简称，比如我们可以用svn ci代替svn commit，用svn co代替svn checkout</p>

<p>综合上述，我们就可以轻松搭建svn服务器环境了</p>

<h5>三、使用svn客户端功能</h5>

<h6>1.从本地导入代码到服务器(第一次初始化导入)</h6>

<p>在终端中输入</p>

<p>svn import /Users/apple/Documents/eclipse_workspace/weibo svn://localhost/mycode/weibo &ndash;username=mj &ndash;password=123 -m &ldquo;初始化导入&rdquo;</p>

<p>我解释下指令的意思：将/Users/apple/Documents/eclipse_workspace/weibo中的所有内容，上传到服务器mycode仓库的weibo目录下，后面双引号中的&#8221;初始化导入&#8221;是注释</p>

<h6>2.从服务器端下载代码到客户端本地</h6>

<p>在终端中输入svn checkout svn://localhost/mycode &ndash;username=mj &ndash;password=123 /Users/apple/Documents/code</p>

<p>我解释下指令的意思：将服务器中mycode仓库的内容下载到/Users/apple/Documents/code目录中</p>

<h6>3.提交更改过的代码到服务器</h6>

<p>在步骤2中已经将服务器端的代码都下载到/Users/apple/Documents/code目录中，现在修改下里面的一些代码，然后提交这些修改到服务器</p>

<p>1> 打开终端，先定位到/Users/apple/Documents/code目录，输入：cd /Users/apple/Documents/code</p>

<p>2> 输入提交指令：svn commit -m &ldquo;修改了main.m文件&rdquo;</p>

<p>这个指令会将/Users/apple/Documents/code下的所有修改都同步到服务器端，假如这次我只修改了main.文件</p>

<p>可以看到终端的打印信息：</p>

<p>Sending        weibo/weibo/main.m
Transmitting file data .
Committed revision 2.</p>

<h6>4.更新服务器端的代码到客户端</h6>

<p>这个应该是最简单的指令了，在终端中定位到客户端代码目录后，比如上面的/Users/apple/Documents/code目录，然后再输入指令：svn update</p>

<h6>5.至于svn的其他用法，可以在终端输入：svn help</h6>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSTimer的用法-下载进度显示]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/nstimerde-yong-fa-xia-zai-jin-du-xian-shi/"/>
    <updated>2015-02-13T17:31:16+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/nstimerde-yong-fa-xia-zai-jin-du-xian-shi</id>
    <content type="html"><![CDATA[<p>NSTimer的作用就是以一定的时间间隔向目标对象发送特殊的消息。最常见的是用来控制下载进度条的显示。</p>

<!--more-->


<h4>创建一个 Timer</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ scheduledTimerWithTimeInterval: invocation: repeats:
</span><span class='line'>+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti   invocation:(NSInvocation *)invocation   repeats:(BOOL)yesOrNo;
</span><span class='line'>+ scheduledTimerWithTimeInterval: target: selector: userInfo: repeats:
</span><span class='line'>+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)ti   target:(id)aTarget   selector:(SEL)aSelector   userInfo:(id)userInfo   repeats:(BOOL)yesOrNo;</span></code></pre></td></tr></table></div></figure>


<h4>启动 Timer</h4>

<pre><code>– fire
</code></pre>

<h4>停止 Timer</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>– invalidate
</span><span class='line'>Timer设置
</span><span class='line'>– isValid
</span><span class='line'>– fireDate
</span><span class='line'>– setFireDate:
</span><span class='line'>– timeInterval
</span><span class='line'>– userInfo</span></code></pre></td></tr></table></div></figure>


<h4>有码有真相：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  AppDelegate.m  
</span><span class='line'>//  TimerDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-12-18.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "AppDelegate.h"  
</span><span class='line'>  
</span><span class='line'>//最大下载时间  
</span><span class='line'>#define DOWNLOAD_TIMEOUT    60.0  
</span><span class='line'>  
</span><span class='line'>static int sec = 0;  
</span><span class='line'>  
</span><span class='line'>@interface AppDelegate ()  
</span><span class='line'>{  
</span><span class='line'>    NSTimer *_timer;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>@end  
</span><span class='line'>  
</span><span class='line'>@implementation AppDelegate  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [_window release];  
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)initView  
</span><span class='line'>{  
</span><span class='line'>    //创建一个进度条：用于显示下载的进度  
</span><span class='line'>    UIProgressView *progress = [[UIProgressView alloc] initWithFrame:CGRectMake(20, 60, 220, 30)];  
</span><span class='line'>    [progress setBackgroundColor:[UIColor brownColor]];  
</span><span class='line'>    [progress setProgressViewStyle:UIProgressViewStyleBar];  
</span><span class='line'>    [progress setProgress:0];  
</span><span class='line'>    [progress setTag:0x123];  
</span><span class='line'>    [self.window addSubview:progress];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//更新进度条  
</span><span class='line'>- (void)updateView  
</span><span class='line'>{  
</span><span class='line'>    sec++;  
</span><span class='line'>    UIProgressView *pro = (UIProgressView *)[self.window viewWithTag:0x123];  
</span><span class='line'>    if (pro) {  
</span><span class='line'>        [pro setProgress:sec / DOWNLOAD_TIMEOUT animated:YES];  
</span><span class='line'>    }  
</span><span class='line'>    if (sec &gt; DOWNLOAD_TIMEOUT) {  
</span><span class='line'>        //这是唯一的方法：从NSRunLoop中移除创建的定时器  
</span><span class='line'>        [_timer invalidate];  
</span><span class='line'>        _timer = nil;  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions  
</span><span class='line'>{  
</span><span class='line'>    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];  
</span><span class='line'>    // Override point for customization after application launch.  
</span><span class='line'>  
</span><span class='line'>    [self initView];  
</span><span class='line'>    //在当前的runloop中添加一个定时器，每0.5s调用updateView函数一次  
</span><span class='line'>    _timer = [NSTimer scheduledTimerWithTimeInterval:0.5 target:self selector:@selector(updateView) userInfo:nil repeats:YES];  
</span><span class='line'>      
</span><span class='line'>    self.window.backgroundColor = [UIColor whiteColor];  
</span><span class='line'>    [self.window makeKeyAndVisible];  
</span><span class='line'>    return YES;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<p><a href="http://download.csdn.net/detail/swplzj/6735607">下载例子链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS CoreText类库的详细介绍]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-coretextlei-ku-de-xiang-xi-jie-shao/"/>
    <updated>2015-02-13T17:25:08+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-coretextlei-ku-de-xiang-xi-jie-shao</id>
    <content type="html"><![CDATA[<p>iOS 编程中如何使用CoreText类库</p>

<p><img src="http://img.blog.csdn.net/20131104171422968?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3dwbHpq/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="id2" /></p>

<!--more-->


<p>从框架图中我们可以看出：
CTFrame 作为一个整体的画布(Canvas)，其中由行(CTLine)组成，而每行可以分为一个或多个小方块（CTRun）。</p>

<p>注意：你不需要自己创建CTRun，Core Text将根据NSAttributedString的属性来自动创建CTRun。每个CTRun对象对应不同的属性，正因此，你可以自由的控制字体、颜色、字间距等等信息。
通常处理步聚：</p>

<ol>
<li><p>使用core text就是先有一个要显示的string，然后定义这个string每个部分的样式－>attributedString －> 生成 CTFramesetter -> 得到CTFrame -> 绘制（CTFrameDraw）
其中可以更详细的设置换行方式，对齐方式，绘制区域的大小等。</p></li>
<li><p>绘制只是显示，点击事件就需要一个判断了。</p></li>
</ol>


<p>CTFrame 包含了多个CTLine,并且可以得到各个line的其实位置与大小。判断点击处在不在某个line上。
 CTLine 又可以判断这个点(相对于ctline的坐标)处的文字范围。然后遍历这个string的所有
 NSTextCheckingResult，根据result的rang判断点击处在不在这个rang上，从而得到点击的链接与位置。</p>

<h4>首先，创建工程，添加系统库CoreText</h4>

<p><img src="http://img.blog.csdn.net/20131104170022796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3dwbHpq/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="id1" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  CoreTextView.m  
</span><span class='line'>//  CoreTextDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-10-30.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "CoreTextView.h"  
</span><span class='line'>#import &lt;CoreText/CoreText.h&gt;  
</span><span class='line'>#import &lt;math.h&gt;  
</span><span class='line'>  
</span><span class='line'>@implementation CoreTextView  
</span><span class='line'>  
</span><span class='line'>static inline double radians (double degrees)  
</span><span class='line'>{  
</span><span class='line'>    return degrees * M_PI / 180;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>void ctLineAndRun(CTFrameRef frame)  
</span><span class='line'>{  
</span><span class='line'>    int lineIndex = 1;  
</span><span class='line'>    //获取frame中的所有行  
</span><span class='line'>    CFArrayRef allLines = CTFrameGetLines(frame);  
</span><span class='line'>    //获取frame中第一行的元素  
</span><span class='line'>    CTLineRef firstLineRef = CFArrayGetValueAtIndex(allLines, lineIndex);  
</span><span class='line'>    //获得frame中所有的行数  
</span><span class='line'>    int linesCount = CFArrayGetCount(allLines);  
</span><span class='line'>    NSLog(@"ctLine的总数量：%d", linesCount);  
</span><span class='line'>    //获取frame中的所有CTRun  
</span><span class='line'>    CFArrayRef ctRun = CTLineGetGlyphRuns(firstLineRef);  
</span><span class='line'>//    CTRunRef firstRun = CFArrayGetValueAtIndex(ctRun, 0);  
</span><span class='line'>//    int runsNum = CTLineGetGlyphCount(ctRun);  
</span><span class='line'>    NSLog(@"ctRun的数量：%ld", CFArrayGetCount(ctRun));  
</span><span class='line'>    //按长度截断字符串：省略号  
</span><span class='line'>    NSAttributedString *attributedStr = [[NSAttributedString alloc] initWithString:@"\u2026"];  
</span><span class='line'>    CTLineRef lineToken = CTLineCreateWithAttributedString((CFAttributedStringRef) attributedStr);  
</span><span class='line'>    //截断的方式  
</span><span class='line'>    CTLineTruncationType lineTruncationType = kCTLineTruncationEnd;  
</span><span class='line'>    CTLineRef newLine = CTLineCreateTruncatedLine(firstLineRef, 260, lineTruncationType, lineToken);  
</span><span class='line'>    CGContextRef context = UIGraphicsGetCurrentContext();  
</span><span class='line'>    //重置画布  
</span><span class='line'>    CGContextSetTextMatrix(context, CGAffineTransformIdentity);  
</span><span class='line'>    //保存Context状态  
</span><span class='line'>    CGContextSaveGState(context);  
</span><span class='line'>    CGMutablePathRef path = CGPathCreateMutable();      
</span><span class='line'>  CGRect tmpRect = CGRectMake(40, 40, 320-80, 40);
</span><span class='line'>    CGRect bounds = CGRectInset(tmpRect, 0.0f, 0.0f);
</span><span class='line'>    CGPathAddRect(path, NULL, bounds);  
</span><span class='line'>    CGContextAddPath(context, path);  
</span><span class='line'>    CGContextSetFillColorWithColor(context, [UIColor orangeColor].CGColor);  
</span><span class='line'>    CGContextFillPath(context);  
</span><span class='line'>    CGContextSetTextPosition(context, 40, 40);  
</span><span class='line'>    CTLineDraw(newLine, context);  
</span><span class='line'>    CGPathCloseSubpath(path);  
</span><span class='line'>    CGPathRelease(path);  
</span><span class='line'>    //获取一行文字中，指定charIndex字符(也就是StringRange的Location)相对ctline本身x原点的偏移量（譬如第一个字符很显然是0），返回值与secondaryOffset同为一个值,另外也可以用来求一行字符所占的像素长度  
</span><span class='line'>    //第二个字符index位置是在ctframe整个中的位置，譬如第二行的第一个字符的index是加上第一行所有字符后的index  
</span><span class='line'>    CGFloat secondaryOffSet;  
</span><span class='line'>    CGFloat primaryOffSet = CTLineGetOffsetForStringIndex(firstLineRef, CTLineGetStringRange(firstLineRef).location, &secondaryOffSet);  
</span><span class='line'>    NSLog(@"第%ld个字符与本身x原点的偏移量:%f",CTLineGetStringRange(firstLineRef).location + 1,primaryOffSet);  
</span><span class='line'>    //获取相对于Flush的偏移量  
</span><span class='line'>    //    CGFloat penOffset = CTLineGetPenOffsetForFlush(firstLine, NSTextAlignmentLeft, 240);  
</span><span class='line'>    //    NSLog(@"相对于Flush的偏移量:%f",penOffset);  
</span><span class='line'>    //CTLineGetStringIndexForPosition 这个方法主要是获得某个ctline中某个位置（position）的character在整个ctframe中的index.这个方法在当有段前缩进或者首行缩进的时候，并不准确，不会跟着缩进而进行偏移，所以段前缩进多少，就需要把position的x值减去多少（譬如段前缩进是20，则要减去20个单位），所以，这个方法最好的用处就是判断一行ctline最多容纳多少的字符，只需把这个point的x位置调很大（超过ctframe path的宽度）就可以了。  
</span><span class='line'>    CGPoint origins[linesCount];  
</span><span class='line'>    CTFrameGetLineOrigins(frame,CFRangeMake(0, 0), origins);  
</span><span class='line'>    CGPoint indexPoint = origins[lineIndex];  
</span><span class='line'>    indexPoint.x -= 20;//段前缩进20,需要减去20//indexPoint.x += 300;可以求  
</span><span class='line'>    CFIndex index = CTLineGetStringIndexForPosition(firstLineRef, indexPoint);  
</span><span class='line'>    NSLog(@"ctframe中%@位置（position）的字符索引:%ld",NSStringFromCGPoint(indexPoint),index);  
</span><span class='line'>    //CTLine在整个文本中所处的range，location是该行前面n行的字符数和，换行符也包括  
</span><span class='line'>    //    CFRange range = CTLineGetStringRange(firstLine);  
</span><span class='line'>    //    NSLog(@"location:%ld=====length:%ld",range.location,range.length);  
</span><span class='line'>      
</span><span class='line'>    //获取一行中上行高(ascent)，下行高(descent)，行距(leading),整行高为(ascent+|descent|+leading) 返回值为整行字符串长度占有的像素宽度。  
</span><span class='line'>    //    CGFloat asc,des,lead;  
</span><span class='line'>    //    double lineWidth = CTLineGetTypographicBounds(firstLine, &asc, &des, &lead);  
</span><span class='line'>    //    NSLog(@"ascent = %f,descent = %f,leading = %f,lineWidth = %f",asc,des,lead,lineWidth);  
</span><span class='line'>      
</span><span class='line'>    //获取一行文字最佳可视范围（会把所有文字都包含进去）  
</span><span class='line'>    //    CGRect lineRect = CTLineGetImageBounds(firstLine, context);  
</span><span class='line'>    //    NSLog(@"整行的范围:%@",NSStringFromCGRect(lineRect));  
</span><span class='line'>CGContextRestoreGState(context);  
</span><span class='line'>  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (id)initWithFrame:(CGRect)frame  
</span><span class='line'>{  
</span><span class='line'>    self = [super initWithFrame:frame];  
</span><span class='line'>    if (self) {  
</span><span class='line'>        // Initialization code  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>// Only override drawRect: if you perform custom drawing.  
</span><span class='line'>// An empty implementation adversely affects performance during animation.  
</span><span class='line'>- (void)drawRect:(CGRect)rect  
</span><span class='line'>{  
</span><span class='line'>    NSMutableAttributedString *attributedStr = [[NSMutableAttributedString alloc] initWithString:@"北京出现严重雾霾后，网友纷纷给PM2.5取中文名字。严肃点就叫“公雾源”，高端点就叫“京尘”，霸气点就叫“尘疾思汗”，乐观点就叫“尘世美”，娱乐点就叫“尘惯吸”。但直到那五个字映入眼帘，才明白了中文的强大和词汇的无穷魅力：喂人民服雾！"];  
</span><span class='line'>    [self setAttributedStringParagraphStyle:attributedStr];  
</span><span class='line'>//    [self setAttributesStringAttributes:attributedStr];  
</span><span class='line'>  
</span><span class='line'>    CTFramesetterRef frameSetter = CTFramesetterCreateWithAttributedString((CFAttributedStringRef) attributedStr);  
</span><span class='line'>    CGMutablePathRef path = CGPathCreateMutable();  
</span><span class='line'>  CGRect tempRect1 = CGRectMake(20, 100, CGRectGetWidth(self.bounds)-40, 400);
</span><span class='line'>    CGRect bounds = CGRectInset(tempRect1, 10.0f, 10.0f);
</span><span class='line'>    CGPathAddRect(path, NULL, bounds);  
</span><span class='line'>    CTFrameRef frame = CTFramesetterCreateFrame(frameSetter, CFRangeMake(0, 0), path, NULL);  
</span><span class='line'>      
</span><span class='line'>    CGContextRef context = UIGraphicsGetCurrentContext();  
</span><span class='line'>    CGContextTranslateCTM(context, 0, self.bounds.size.height);//转换CTM  
</span><span class='line'>    CGContextScaleCTM(context, 1.0, -1.0);  
</span><span class='line'>    CGContextSaveGState(context);//向图形状态栈中保存context状态  
</span><span class='line'>      
</span><span class='line'>    //ctLine的相关操作  
</span><span class='line'>    ctLineAndRun(frame);  
</span><span class='line'>      
</span><span class='line'>    CGContextSetTextMatrix(context, CGAffineTransformIdentity);//重置画布  
</span><span class='line'>    CGContextAddPath(context, path);  
</span><span class='line'>    CGContextSetFillColorWithColor(context, [UIColor yellowColor].CGColor);  
</span><span class='line'>    CGContextFillPath(context);  
</span><span class='line'>      
</span><span class='line'>    //CTLineGetImageBounds的应用，获取一行文字的范围， 就是指把这一行文字点有的像素矩阵作为一个image图片，来得到整个矩形区域  
</span><span class='line'>    CFArrayRef Lines = CTFrameGetLines(frame);  
</span><span class='line'>    int lineCount = CFArrayGetCount(Lines);  
</span><span class='line'>      
</span><span class='line'>    CGPoint origins[lineCount];  
</span><span class='line'>    CTFrameGetLineOrigins(frame, CFRangeMake(0, 0), origins);  
</span><span class='line'>    NSInteger lineIndex = 0;  
</span><span class='line'>      
</span><span class='line'>    for (id oneLine in (NSArray *)Lines) {  
</span><span class='line'>        //相对于每一行基线原点的偏移量和宽高（例如：{1.2， -2.57227}, {208.025, 19.2523}，就是相对于本身的基线原点向右偏移1.2个单位，向下偏移2.57227个单位，后面是宽高）  
</span><span class='line'>        CGRect lineBounds = CTLineGetImageBounds((CTLineRef)oneLine, context);  
</span><span class='line'>          
</span><span class='line'>        //每一行的起始点（相对于context）加上相对于本身基线原点的偏移量  
</span><span class='line'>        lineBounds.origin.x += origins[lineIndex].x + 30;  
</span><span class='line'>        lineBounds.origin.y += origins[lineIndex].y + 110;  
</span><span class='line'>          
</span><span class='line'>        lineIndex++;  
</span><span class='line'>          
</span><span class='line'>        //填充  
</span><span class='line'>        CGContextSetStrokeColorWithColor(context, [[UIColor redColor] CGColor]);  
</span><span class='line'>        CGContextSetLineWidth(context, 1.0);  
</span><span class='line'>        //设置长方形4个顶点  
</span><span class='line'>        CGPoint points[] = {CGPointMake(lineBounds.origin.x, lineBounds.origin.y), CGPointMake(lineBounds.origin.x + lineBounds.size.width, lineBounds.origin.y), CGPointMake(lineBounds.origin.x + lineBounds.size.width, lineBounds.origin.y + lineBounds.size.height), CGPointMake(lineBounds.origin.x, lineBounds.origin.y + lineBounds.size.height)};  
</span><span class='line'>        CGContextAddLines(context, points, 4);  
</span><span class='line'>        CGContextClosePath(context);  
</span><span class='line'>        CGContextStrokePath(context);  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    //画  
</span><span class='line'>    CTFrameDraw(frame, context);  
</span><span class='line'>    CGPathRelease(path);  
</span><span class='line'>    CFRelease(frame);  
</span><span class='line'>    CFRelease(frameSetter);  
</span><span class='line'>      
</span><span class='line'>    //恢复状态栈中原有的状态  
</span><span class='line'>    CGContextRestoreGState(context);  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)setAttributesStringAttributes:(NSMutableAttributedString *)attributedString  
</span><span class='line'>{  
</span><span class='line'>    //设置字体  
</span><span class='line'>    CTFontRef font = CTFontCreateWithName(CFSTR("Georgia"), 20, NULL);  
</span><span class='line'>    [attributedString addAttribute:(id)kCTFontAttributeName value:(id)font range:NSMakeRange(0, 4)];  
</span><span class='line'>      
</span><span class='line'>    //设置字间距  
</span><span class='line'>    long kernNumber = 5;  
</span><span class='line'>    CFNumberRef kernNum = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &kernNumber);  
</span><span class='line'>    [attributedString addAttribute:(id)kCTKernAttributeName value:(id)kernNum range:(NSRange){0, 4}];  
</span><span class='line'>      
</span><span class='line'>    //设置字体颜色  
</span><span class='line'>    long strokeNumber = 2;  
</span><span class='line'>    CFNumberRef strokeNum = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &strokeNumber);  
</span><span class='line'>    [attributedString addAttribute:(id)kCTStrokeWidthAttributeName value:(id)strokeNum range:(NSRange){0, 4}];  
</span><span class='line'>    [attributedString addAttribute:(id)kCTStrokeColorAttributeName value:(id)[UIColor redColor].CGColor range:NSMakeRange(0, 4)];  
</span><span class='line'>      
</span><span class='line'>    //设置下划线  
</span><span class='line'>    [attributedString addAttribute:(id)kCTUnderlineStyleAttributeName value:(id)[NSNumber numberWithInt:kCTUnderlineStyleSingle] range:NSMakeRange(0, 4)];  
</span><span class='line'>    [attributedString addAttribute:(id)kCTUnderlineStyleAttributeName value:(id)[UIColor redColor] range:(NSRange){0, 4}];  
</span><span class='line'>      
</span><span class='line'>    //多属性设置  
</span><span class='line'>    UIColor *color = [UIColor redColor];  
</span><span class='line'>    NSMutableDictionary *attributes = [[NSMutableDictionary alloc] initWithObjectsAndKeys:(id)font, kCTFontAttributeName, kernNum, kCTKernAttributeName, color.CGColor, kCTForegroundColorAttributeName, nil nil];  
</span><span class='line'>    [attributedString setAttributes:attributes range:NSMakeRange(0, 4)];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)setAttributedStringParagraphStyle:(NSMutableAttributedString *)attributedString  
</span><span class='line'>{  
</span><span class='line'>    //对齐方式  
</span><span class='line'>    CTTextAlignment textAlignment = kCTLeftTextAlignment;  
</span><span class='line'>    CTParagraphStyleSetting alignmentStyleSetting;  
</span><span class='line'>    alignmentStyleSetting.spec = kCTParagraphStyleSpecifierAlignment;  
</span><span class='line'>    alignmentStyleSetting.valueSize = sizeof(textAlignment);  
</span><span class='line'>    alignmentStyleSetting.value = &textAlignment;  
</span><span class='line'>      
</span><span class='line'>    //首行缩进  
</span><span class='line'>    CGFloat firstLineIndentSize = 55.0f;  
</span><span class='line'>    CTParagraphStyleSetting firstLineIndent;  
</span><span class='line'>    firstLineIndent.spec = kCTParagraphStyleSpecifierFirstLineHeadIndent;  
</span><span class='line'>    firstLineIndent.value = &firstLineIndentSize;  
</span><span class='line'>    firstLineIndent.valueSize = sizeof(float);  
</span><span class='line'>      
</span><span class='line'>    //段前缩进（文字左侧距离context最左侧的距离）  
</span><span class='line'>    CGFloat headIndentSize = 20.0f;  
</span><span class='line'>    CTParagraphStyleSetting headIndent;  
</span><span class='line'>    headIndent.spec = kCTParagraphStyleSpecifierHeadIndent;  
</span><span class='line'>    headIndent.valueSize = sizeof(float);  
</span><span class='line'>    headIndent.value = &headIndentSize;  
</span><span class='line'>      
</span><span class='line'>    //断尾缩进(文字右侧距离context最左侧的距离)  
</span><span class='line'>    CGFloat tailIndentSize = 251.0f;    //文字最左侧到文字最右侧的距离  
</span><span class='line'>    CTParagraphStyleSetting tailIndent;  
</span><span class='line'>    tailIndent.spec = kCTParagraphStyleSpecifierTailIndent;  
</span><span class='line'>    tailIndent.value = &tailIndentSize;  
</span><span class='line'>    tailIndent.valueSize = sizeof(float);  
</span><span class='line'>      
</span><span class='line'>    //换行模式  
</span><span class='line'>    CTLineBreakMode lineBreak = kCTLineBreakByCharWrapping;  
</span><span class='line'>    CTParagraphStyleSetting lineBreakMode;  
</span><span class='line'>    lineBreakMode.spec = kCTParagraphStyleSpecifierLineBreakMode;  
</span><span class='line'>    lineBreakMode.value = &lineBreak;  
</span><span class='line'>    lineBreakMode.valueSize = sizeof(CTLineBreakMode);  
</span><span class='line'>      
</span><span class='line'>    //最大行高  
</span><span class='line'>    CGFloat maxHeightSize = 50.0f;  //最大行高不能超过50个像素，超过按照最大像素来  
</span><span class='line'>    CTParagraphStyleSetting maxHeightSetting;  
</span><span class='line'>    maxHeightSetting.spec = kCTParagraphStyleSpecifierMaximumLineHeight;  
</span><span class='line'>    maxHeightSetting.value = &maxHeightSize;  
</span><span class='line'>    maxHeightSetting.valueSize = sizeof(float);  
</span><span class='line'>      
</span><span class='line'>    //多行高  
</span><span class='line'>    CGFloat multipleHeight = 1.2f;  //1.2倍原来的高度  
</span><span class='line'>    CTParagraphStyleSetting multipleHeightSetting;  
</span><span class='line'>    multipleHeightSetting.spec = kCTParagraphStyleSpecifierLineHeightMultiple;  
</span><span class='line'>    multipleHeightSetting.value = &multipleHeight;  
</span><span class='line'>    multipleHeightSetting.valueSize = sizeof(float);  
</span><span class='line'>      
</span><span class='line'>    //最大行距  
</span><span class='line'>    CGFloat maxLineSpace = 5.0f;//最大行距不能超过5像素，超过了按最大行距画图，最小行距同理，行距调整只在中间值中进行  
</span><span class='line'>    CTParagraphStyleSetting maxLineSpaceSetting;  
</span><span class='line'>    maxLineSpaceSetting.spec = kCTParagraphStyleSpecifierMaximumLineSpacing;  
</span><span class='line'>    maxLineSpaceSetting.valueSize = sizeof(float);  
</span><span class='line'>    maxLineSpaceSetting.value = &maxLineSpace;  
</span><span class='line'>      
</span><span class='line'>    //行距  
</span><span class='line'>    CGFloat lineSpace = 25.0f;  //行距25像素  
</span><span class='line'>    CTParagraphStyleSetting lineSpaceSetting;  
</span><span class='line'>    lineSpaceSetting.spec = kCTParagraphStyleSpecifierLineSpacing;  
</span><span class='line'>    lineSpaceSetting.value = &lineSpace;  
</span><span class='line'>    lineSpaceSetting.valueSize = sizeof(float);  
</span><span class='line'>      
</span><span class='line'>    //段前间隔  
</span><span class='line'>    CGFloat paragraghSpace = 15.0f;  
</span><span class='line'>    CTParagraphStyleSetting paragraghInterval;  
</span><span class='line'>    paragraghInterval.spec = kCTParagraphStyleSpecifierParagraphSpacing;  
</span><span class='line'>    paragraghInterval.valueSize = sizeof(float);  
</span><span class='line'>    paragraghInterval.value = ¶graghSpace;  
</span><span class='line'>      
</span><span class='line'>    CTParagraphStyleSetting settingsArray[] = {alignmentStyleSetting, firstLineIndent, headIndent, tailIndent, lineBreakMode, maxLineSpaceSetting, multipleHeightSetting, lineSpaceSetting, maxLineSpaceSetting, paragraghInterval};  
</span><span class='line'>      
</span><span class='line'>    //采用setting里面前10个的段落设置，不够10个，就按照setting拥有的最大段落设置个数来算  
</span><span class='line'>    CTParagraphStyleRef paragraphStyle = CTParagraphStyleCreate(settingsArray, 10);  
</span><span class='line'>    NSDictionary *paragraphStyleDic = [[NSDictionary alloc] initWithObjectsAndKeys:(id)paragraphStyle, kCTParagraphStyleAttributeName, nil nil];  
</span><span class='line'>    [attributedString setAttributes:paragraphStyleDic range:(NSRange){0, [attributedString length]}];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)ctLineAndRun  
</span><span class='line'>{  
</span><span class='line'>      
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<p><a href="https://developer.apple.com/library/mac/#documentation/Carbon/Reference/CoreText_Framework_Ref/_index.html">关于CoreText的官方API</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 应用程序目录结构]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-ying-yong-cheng-xu-mu-lu-jie-gou/"/>
    <updated>2015-02-13T17:22:19+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-ying-yong-cheng-xu-mu-lu-jie-gou</id>
    <content type="html"><![CDATA[<p>iOS应用程序采用的是沙盒原理设计，普及一下知识：沙盒是在受限的安全环境中运行应用程序的一种做法，这种做法是要限制授予应用程序的代码访问权限。</p>

<!--more-->


<p>具体的特点有三点：</p>

<ol>
<li>每个应用程序都有自己的存储空间；</li>
<li>应用程序不能翻过自己的围墙去访问别的存储空间的内容；</li>
<li>应用程序请求的数据都要通过权限检测，假如不符合条件的话，不会被放行。</li>
</ol>


<p>在Finder上点->前往->前往文件夹，输入/Users/username/Library/Application Support/iPhone Simulator/  前往。username这里写你的用户名。这样就能在Mac上找到模拟器上应用程序的沙盒目录了。每一个应用程序都有自己独立的三个目录：Document, Library, tmp，这三个目录之间不能相互访问。
Documents：苹果建议将程序中建立的或在程序中浏览到的文件数据保存在该目录下，iTunes备份和恢复的时候会包括此目录</p>

<ul>
<li>Library：存储程序的默认设置或其它状态信息；</li>
<li>Library/Caches：存放缓存文件，iTunes不会备份此目录，此目录下文件不会在应用退出删除；</li>
<li>tmp：提供一个即时创建临时文件的地方。</li>
</ul>


<p>iTunes在与iPhone同步时，备份所有的Documents和Library文件。
iPhone在重启时，会丢弃所有的tmp文件。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 数据持久化(四)]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-si/"/>
    <updated>2015-02-13T17:11:36+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-si</id>
    <content type="html"><![CDATA[<p>iOS中有五种持久化数据的方式：属性列表、对象归档、NSUserDefaults、SQLite3和Core Data</p>

<!--more-->


<h4>SQLite3的数据类型</h4>

<p>数据库在应用中最常用的，方便说数据的存取。
所有存在Sqlite 3.0版本当中的数据都拥有以下之一的数据类型：
空（NULL）：该值为空
整型（INTEGEER）：有符号整数，按大小被存储成1,2,3,4,6或8字节。
实数（REAL）：浮点数，以8字节指数形式存储。
文本（TEXT）：字符串，以数据库编码方式存储（UTF-8, UTF-16BE 或者 UTF-16-LE）。
BLOB：BLOB数据不做任何转换，以输入形式存储。</p>

<p>在关系数据库中，CLOB和BLOB类型被用来存放大对象。BOLB表示二进制大对象，这种数据类型通过用来保存图片，图象，视频等。CLOB表示字符大对象，能够存放大量基于字符的数据。</p>

<h4>iOS中数据库SQLite3的使用</h4>

<p>具体使用方法如下:</p>

<p>1.添加开发包libsqlite3.0.dylib</p>

<p>首先是设置项目文件，在项目中添加iPhone版的sqlite3的数据库的开发包，在项目下的Frameworks点击右键，然后选择libsqlite3.0.dylib文件。</p>

<p><img src="http://img.blog.csdn.net/20131220172258390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3dwbHpq/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="id1" /></p>

<p>libsqlite3.0.dylib文件地址:</p>

<pre><code>/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS2.2.sdk/usr/lib/libsqlite3.0.dylib
</code></pre>

<p>2.有码有真相：</p>

<p>加入FMDB这个第三方库文件，项目编程开始。</p>

<h4>AppDelegate.h文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  AppDelegate.h  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-22.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;UIKit/UIKit.h&gt;  
</span><span class='line'>  
</span><span class='line'>@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt;  
</span><span class='line'>  
</span><span class='line'>@property (strong, nonatomic) UIWindow *window;  
</span><span class='line'>  
</span><span class='line'>/** 
</span><span class='line'> *  @brief  在状态栏处显示的提示框 
</span><span class='line'> * 
</span><span class='line'> *  @param string   显示的字符串 
</span><span class='line'> *  @param duration 显示的时长 
</span><span class='line'> */  
</span><span class='line'>+ (void)showStatusWithText:(NSString *)string duration:(NSTimeInterval)duration;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>AppDelegate.m文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  AppDelegate.m  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-22.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "AppDelegate.h"  
</span><span class='line'>#import "RootViewController.h"  
</span><span class='line'>  
</span><span class='line'>@interface AppDelegate ()  
</span><span class='line'>  
</span><span class='line'>@property (strong, nonatomic) UIWindow *statusWindow;  
</span><span class='line'>@property (retain, nonatomic) UILabel *statusLabel;  
</span><span class='line'>  
</span><span class='line'>- (void)dismissStatusLabel;  
</span><span class='line'>  
</span><span class='line'>@end  
</span><span class='line'>  
</span><span class='line'>@implementation AppDelegate  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [self.statusWindow release];  
</span><span class='line'>    [self.statusLabel release];  
</span><span class='line'>      
</span><span class='line'>    [_window release];  
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions  
</span><span class='line'>{  
</span><span class='line'>    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];  
</span><span class='line'>   
</span><span class='line'>    self.statusWindow = [[UIWindow alloc] initWithFrame:CGRectZero];  
</span><span class='line'>    self.statusWindow.backgroundColor = [UIColor clearColor];  
</span><span class='line'>    self.statusWindow.windowLevel = UIWindowLevelStatusBar + 1;  
</span><span class='line'>  
</span><span class='line'>    self.statusLabel = [[UILabel alloc] initWithFrame:CGRectZero];  
</span><span class='line'>    self.statusLabel.backgroundColor = [UIColor clearColor];  
</span><span class='line'>    self.statusLabel.textColor = [UIColor whiteColor];  
</span><span class='line'>    self.statusLabel.font = [UIFont systemFontOfSize:13];  
</span><span class='line'>    [self.statusWindow addSubview:self.statusLabel];  
</span><span class='line'>    [self.statusWindow makeKeyAndVisible];  
</span><span class='line'>      
</span><span class='line'>    RootViewController *rootVC = [[RootViewController alloc] initWithNibName:@"RootViewController" bundle:nil];  
</span><span class='line'>    UINavigationController *rootNav = [[UINavigationController alloc] initWithRootViewController:rootVC];  
</span><span class='line'>    [rootVC release];  
</span><span class='line'>      
</span><span class='line'>    self.window.rootViewController = rootNav;  
</span><span class='line'>    [rootNav release];  
</span><span class='line'>      
</span><span class='line'>    // Override point for customization after application launch.  
</span><span class='line'>    self.window.backgroundColor = [UIColor whiteColor];  
</span><span class='line'>    [self.window makeKeyAndVisible];  
</span><span class='line'>    return YES;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>#pragma mark - Custom methods  
</span><span class='line'>  
</span><span class='line'>- (void)dismissStatusLabel  
</span><span class='line'>{  
</span><span class='line'>    CGRect rect = self.statusWindow.frame;  
</span><span class='line'>    rect.origin.y -= rect.size.height;  
</span><span class='line'>    [UIView animateWithDuration:0.8 animations:^{  
</span><span class='line'>        self.statusWindow.frame = rect;  
</span><span class='line'>    }];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>/** 
</span><span class='line'> *  @brief  在状态栏处显示的提示框 
</span><span class='line'> * 
</span><span class='line'> *  @param string   显示的字符串 
</span><span class='line'> *  @param duration 显示的时长 
</span><span class='line'> */  
</span><span class='line'>+ (void)showStatusWithText:(NSString *)string duration:(NSTimeInterval)duration  
</span><span class='line'>{  
</span><span class='line'>    AppDelegate *delegate = (AppDelegate *)[UIApplication sharedApplication].delegate;  
</span><span class='line'>      
</span><span class='line'>    delegate.statusLabel.text = string;  
</span><span class='line'>    [delegate.statusLabel sizeToFit];  
</span><span class='line'>    CGRect rect = [UIApplication sharedApplication].statusBarFrame;  
</span><span class='line'>    CGFloat width = delegate.statusLabel.frame.size.width;  
</span><span class='line'>    CGFloat height = rect.size.height;  
</span><span class='line'>    rect.origin.x = rect.size.width = width - 5;  
</span><span class='line'>    rect.size.width = width;  
</span><span class='line'>    delegate.statusWindow.frame = rect;  
</span><span class='line'>    delegate.statusLabel.backgroundColor = [UIColor blackColor];  
</span><span class='line'>    delegate.statusLabel.frame = CGRectMake(100, 0, width, height);  
</span><span class='line'>    duration = (duration &lt; 1.0 ? 1.0 : duration);  
</span><span class='line'>    duration = (duration &gt; 4.0 ? 4.0 : duration);  
</span><span class='line'>    [delegate performSelector:@selector(dismissStatusLabel)];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>使用FMDB第三方库，数据库管理文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  DBManager.h  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-26.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>  
</span><span class='line'>#import "FMDatabaseAdditions.h"  
</span><span class='line'>  
</span><span class='line'>@class FMDatabase;  
</span><span class='line'>  
</span><span class='line'>/** 
</span><span class='line'> *  @brief 对数据连接进行管理，包括连接，关闭连接 
</span><span class='line'> *  可以建立长连接 
</span><span class='line'> * 
</span><span class='line'> */  
</span><span class='line'>@interface DBManager : NSObject{  
</span><span class='line'>    NSString *_dbPath;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@property (readonly, nonatomic) FMDatabase *dataBase;  
</span><span class='line'>  
</span><span class='line'>//单例模式  
</span><span class='line'>+ (DBManager *)defaultDBManager;  
</span><span class='line'>  
</span><span class='line'>//关闭数据库  
</span><span class='line'>- (void)close;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  DBManager.m  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-26.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "DBManager.h"  
</span><span class='line'>#import "FMDatabase.h"  
</span><span class='line'>  
</span><span class='line'>//#define kDefaultDBName @"user.sqlite"  
</span><span class='line'>#define kDefaultDBName @"user.db"  
</span><span class='line'>  
</span><span class='line'>@interface DBManager ()  
</span><span class='line'>  
</span><span class='line'>@end  
</span><span class='line'>  
</span><span class='line'>static DBManager *_sharedDBManager;  
</span><span class='line'>  
</span><span class='line'>@implementation DBManager  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [self close];  
</span><span class='line'>      
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (id)init  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        int state = [self initializeDBWithName:kDefaultDBName];  
</span><span class='line'>        if (-1 == state) {  
</span><span class='line'>            NSLog(@"数据库初始化失败！");  
</span><span class='line'>        }else {  
</span><span class='line'>            NSLog(@"数据库初始化成功！");  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (int)initializeDBWithName:(NSString *)name  
</span><span class='line'>{  
</span><span class='line'>    if (!name) {  
</span><span class='line'>        return -1;  //数据库创建失败  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    //沙盒Doc目录  
</span><span class='line'>    NSString *doc = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];  
</span><span class='line'>    _dbPath = [doc stringByAppendingString:[NSString stringWithFormat:@"/%@", name]];  
</span><span class='line'>    NSFileManager *fileManager = [NSFileManager defaultManager];  
</span><span class='line'>    BOOL exist = [fileManager fileExistsAtPath:_dbPath];  
</span><span class='line'>    [self connect];  
</span><span class='line'>    return (exist == YES ? 0 : 1);  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//连接数据库  
</span><span class='line'>- (void)connect  
</span><span class='line'>{  
</span><span class='line'>    if (!_dataBase) {  
</span><span class='line'>        _dataBase = [[FMDatabase alloc] initWithPath:_dbPath];  
</span><span class='line'>    }  
</span><span class='line'>    if (![_dataBase open]) {  
</span><span class='line'>        NSLog(@"不能打开数据库");  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)close  
</span><span class='line'>{  
</span><span class='line'>    [_dataBase close];  
</span><span class='line'>    [_sharedDBManager release];  
</span><span class='line'>    _sharedDBManager = nil;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>+ (DBManager *)defaultDBManager  
</span><span class='line'>{  
</span><span class='line'>    if (!_sharedDBManager) {  
</span><span class='line'>        _sharedDBManager = [[DBManager alloc] init];  
</span><span class='line'>    }  
</span><span class='line'>    return _sharedDBManager;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>向创建的数据库文件中添加数据表，对表的增删改查</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  UserDB.h  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-26.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>#import "DBManager.h"  
</span><span class='line'>#import "User.h"  
</span><span class='line'>  
</span><span class='line'>@interface UserDB : NSObject{  
</span><span class='line'>    FMDatabase *_db;  
</span><span class='line'>}  
</span><span class='line'>//创建数据表  
</span><span class='line'>- (void)createTable;  
</span><span class='line'>//增：添加用户  
</span><span class='line'>- (void)updateTableWithUser:(User *)user;  
</span><span class='line'>//删：删除用户  
</span><span class='line'>- (void)deleteTableWithUserID:(NSString *)uid;  
</span><span class='line'>//改：修改用户信息  
</span><span class='line'>- (void)modifyTableWithUser:(User *)user;  
</span><span class='line'>//查：查找用户  
</span><span class='line'>- (NSArray *)queryTableWithUid:(NSString *)uid count:(int)userCount;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  UserDB.m  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-26.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "UserDB.h"  
</span><span class='line'>#import "AppDelegate.h"  
</span><span class='line'>  
</span><span class='line'>#define kUserTableName                             @"User"  
</span><span class='line'>  
</span><span class='line'>@implementation UserDB  
</span><span class='line'>  
</span><span class='line'>- (id)init  
</span><span class='line'>{  
</span><span class='line'>    self = [super init];  
</span><span class='line'>    if (self) {  
</span><span class='line'>        //首先查看有没有数据库文件，没有就创建  
</span><span class='line'>        _db = [DBManager defaultDBManager].dataBase;  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//创建数据表  
</span><span class='line'>- (void)createTable  
</span><span class='line'>{  
</span><span class='line'>    FMResultSet *set = [_db executeQuery:[NSString stringWithFormat:@"select count(*) from sqlite_master where type = 'table' and name = '%@'", kUserTableName]];  
</span><span class='line'>    [set next];  
</span><span class='line'>      
</span><span class='line'>    NSInteger count = [set intForColumnIndex:0];  
</span><span class='line'>    BOOL existTable = !!count;  
</span><span class='line'>    if (existTable) {  
</span><span class='line'>        //更新数据库  
</span><span class='line'>        [AppDelegate showStatusWithText:@"数据库已经存在！" duration:2];  
</span><span class='line'>    } else {  
</span><span class='line'>        //插入到数据库  
</span><span class='line'>        NSString *sqlStr = @"CREATE TABLE User (uid INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, name VARCHAR(50), description VARCHAR(100))";  
</span><span class='line'>        BOOL res = [_db executeUpdate:sqlStr];  
</span><span class='line'>        if (!res) {  
</span><span class='line'>            [AppDelegate showStatusWithText:@"数据库创建失败！" duration:2];  
</span><span class='line'>        } else {  
</span><span class='line'>            [AppDelegate showStatusWithText:@"数据库创建成功！" duration:2];  
</span><span class='line'>        }  
</span><span class='line'>          
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//保存数据  
</span><span class='line'>- (void)updateTableWithUser:(User *)user  
</span><span class='line'>{  
</span><span class='line'>    NSMutableString *query = [NSMutableString stringWithFormat:@"INSERT INTO User"];  
</span><span class='line'>    NSMutableString *keys = [NSMutableString stringWithFormat:@" ("];  
</span><span class='line'>    NSMutableString *values = [NSMutableString stringWithFormat:@" ( "];  
</span><span class='line'>    NSMutableArray *arguments = [NSMutableArray arrayWithCapacity:5];  
</span><span class='line'>    if (user.name) {  
</span><span class='line'>        [keys appendString:@"name,"];  
</span><span class='line'>        [values appendString:@"?,"];  
</span><span class='line'>        [arguments addObject:user.name];  
</span><span class='line'>    }  
</span><span class='line'>    if (user.description) {  
</span><span class='line'>        [keys appendString:@"description,"];  
</span><span class='line'>        [values appendString:@"?,"];  
</span><span class='line'>        [arguments addObject:user.description];  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    [keys appendString:@")"];  
</span><span class='line'>    [values appendString:@")"];  
</span><span class='line'>    [query appendFormat:@" %@ VALUES%@", [keys stringByReplacingOccurrencesOfString:@",)" withString:@")"], [values stringByReplacingOccurrencesOfString:@",)" withString:@")"]];  
</span><span class='line'>    NSLog(@"插入一条语句：%@", query);  
</span><span class='line'>    [AppDelegate showStatusWithText:@"插入一条数据!" duration:2];  
</span><span class='line'>    [_db executeUpdate:query withArgumentsInArray:arguments];  
</span><span class='line'>      
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//删除用户信息  
</span><span class='line'>- (void)deleteTableWithUserID:(NSString *)uid  
</span><span class='line'>{  
</span><span class='line'>    NSString *query = [NSString stringWithFormat:@"DELETE FROM User WHERE uid = '%@'", uid];  
</span><span class='line'>    [AppDelegate showStatusWithText:@"删除一条数据!" duration:2];  
</span><span class='line'>    [_db executeUpdate:query];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//修改用户信息  
</span><span class='line'>- (void)modifyTableWithUser:(User *)user  
</span><span class='line'>{  
</span><span class='line'>    if (!user.uid) {  
</span><span class='line'>        return;  
</span><span class='line'>    }  
</span><span class='line'>    NSString *query = @"UPDATE User SET";  
</span><span class='line'>    NSMutableString *temp = [NSMutableString stringWithCapacity:0];  
</span><span class='line'>    if (user.name) {  
</span><span class='line'>        [temp appendFormat:@"name = '%@',", user.name];  
</span><span class='line'>    }  
</span><span class='line'>    if (user.description) {  
</span><span class='line'>        [temp appendFormat:@"description = '%@',", user.description];  
</span><span class='line'>        [temp appendFormat:@")"];  
</span><span class='line'>        query = [query stringByAppendingFormat:@"%@ WHERE uid = '%@'", [temp stringByReplacingOccurrencesOfString:@",)" withString:@""], user.uid];  
</span><span class='line'>        NSLog(@"修改一条数据：%@", query);  
</span><span class='line'>        [AppDelegate showStatusWithText:@"修改了一条数据!" duration:2];  
</span><span class='line'>        [_db executeUpdate:query];  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//查找用户  
</span><span class='line'>- (NSArray *)queryTableWithUid:(NSString *)uid count:(int)userCount  
</span><span class='line'>{  
</span><span class='line'>    NSString *query = @"SELECT uid, name, description FROM User";  
</span><span class='line'>    if (!uid) {  
</span><span class='line'>        query = [query stringByAppendingFormat:@" ORDER BY uid DESC limit %d", userCount];  
</span><span class='line'>    } else {  
</span><span class='line'>        query = [query stringByAppendingFormat:@" WHERE uid &gt; %@ ORDER BY uid DESC limit %d", uid, userCount];  
</span><span class='line'>    }  
</span><span class='line'>    NSLog(@"query = %@", query);  
</span><span class='line'>    FMResultSet *rs = [_db executeQuery:query];  
</span><span class='line'>    NSMutableArray *array = [NSMutableArray arrayWithCapacity:[rs columnCount]];  
</span><span class='line'>    while ([rs next]) {  
</span><span class='line'>        User *user = [[User alloc] init];  
</span><span class='line'>        user.uid = [rs stringForColumn:@"uid"];  
</span><span class='line'>        user.name = [rs stringForColumn:@"name"];  
</span><span class='line'>        user.description = [rs stringForColumn:@"description"];  
</span><span class='line'>        NSLog(@"user.uid = %@\nuser.name = %@\nuser.des = %@\n", user.uid, user.name, user.description);  
</span><span class='line'>        [array addObject:user];  
</span><span class='line'>        [user release];  
</span><span class='line'>    }  
</span><span class='line'>    [rs close];  
</span><span class='line'>    NSLog(@"array = %@\n", array);  
</span><span class='line'>    return array;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>数据模型类</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  User.h  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-26.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>  
</span><span class='line'>@interface User : NSObject  
</span><span class='line'>  
</span><span class='line'>@property (copy, nonatomic) NSString *uid;  
</span><span class='line'>@property (copy, nonatomic) NSString *name;  
</span><span class='line'>@property (copy, nonatomic) NSString *description;  
</span><span class='line'>  
</span><span class='line'>@end  
</span><span class='line'>
</span><span class='line'>[objc] view plaincopy在CODE上查看代码片派生到我的代码片
</span><span class='line'>//  
</span><span class='line'>//  User.m  
</span><span class='line'>//  SQLite3Demo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-26.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "User.h"  
</span><span class='line'>  
</span><span class='line'>@implementation User  
</span><span class='line'>  
</span><span class='line'>@synthesize uid, name, description;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<p>关于数据库的操作在上面代码中基本都包含，你也可以<a href="http://download.csdn.net/detail/swplzj/6746635">点击下载SQLite3Demo源码</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode中系统库文件libz.dylib的作用]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/xcodezhong-xi-tong-ku-wen-jian-libz-dot-dylibde-zuo-yong/"/>
    <updated>2015-02-13T17:08:21+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/xcodezhong-xi-tong-ku-wen-jian-libz-dot-dylibde-zuo-yong</id>
    <content type="html"><![CDATA[<p>libz.dylib这个Xcode系统库文件经常用到。这个其实是个动态链接库。</p>

<p>后缀名为.dylib的文件是一个动态库，这个库是运行时加载而不是编译时加载。这个也说明了obj-C是运行时语言，也就是数据的类型不是在编译时确定的，而是在运行时确定的。</p>

<p>libz.dylib也是zip压缩解压缩的库，开发中经常用到的压缩库，PDF可以使用这个库文件来压缩。</p>

<!--more-->


<p>在Finder中查看，你会发现libz.dylib,libz.1.dylib,libz.1.1.3.dylib其实只是一个“替身”，实际上还是指向libz.1.2.5.dylib(Xcode 4.5)
A file ending in the extension .dylib is a dynamic library: it&rsquo;s a library that&rsquo;s loaded at runtime instead of at compile time. If you&rsquo;re familiar with DLLs from Windows or DSOs, it&rsquo;s more or less the same type of thing with a few twists. <a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html#//apple_ref/doc/uid/TP40001908-SW1">The Dynamic Library Programming Topics</a> section of the Mac OS X Developer Library covers all the details about the format and what you should be aware of.</p>

<p>libz.dylib is the dynamic library for Zlib, a general compression library. PDFs can (and usually do) use zlib to compress different aspects of the data contained within them, but accessing the PDF data at that level is pretty low-level, and higher-level libraries would abstract most of that type of stuff.</p>

<p>总结：</p>

<ol>
<li><p>.dylib意味着这是一个动态链接库.</p></li>
<li><p>libz.dylib是提供zip压缩解压缩的库</p></li>
<li><p>库的接口请#import &ldquo;zlib.h&rdquo;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 数据持久化（三）]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-(san-)/"/>
    <updated>2015-02-13T17:03:35+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-(san-)</id>
    <content type="html"><![CDATA[<p>iOS中有五种持久化数据的方式：属性列表、对象归档、NSUserDefaults、SQLite3和Core Data。</p>

<h4>NSUserDefaults官方文档介绍：</h4>

<p>NSUserDefaults类为和默认系统类交互提供了一种编程接口。默认系统允许应用程序去定制其行为，为了符合用户的喜好。举例来说，你可以允许用户去决定在应用程序中显示的计量单位或者文档多久会自动保存。应用程序在用户默认数据库中，通过给一系列参数赋值来记录类似的喜好。这些参数被称为默认值，因为它们通常被用于一个程序在启动时或默认状态下的默认工作状态。</p>

<!--more-->


<p>在运行时，你可以使用NSUserDefaults对象读取你的应用程序的从一个用户默认数据库使用的默认数据。NSUerDefaults缓存信息，以避免每次获取一个默认值都需要打开用户默认的数据库。同步方法，他会每隔一段时间自动调用，使内存中缓存的信息与用户默认数据库中的信息同步。</p>

<h4>NSUserDefaults</h4>

<p>NSUserDefaults适合存储轻量级的本地数据，比如要保存一个登录界面用户名、密码之类的，NSUserDefaults是比较合适。下次再登录的时候就可以直接从NSUserDefaults里面读取上次登录的信息，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  AppDelegate.m  
</span><span class='line'>//  UserDefaultsDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-20.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "AppDelegate.h"  
</span><span class='line'>#import "WelcomeViewController.h"  
</span><span class='line'>#import "RootViewController.h"  
</span><span class='line'>  
</span><span class='line'>@implementation AppDelegate  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [_window release];  
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)isFirstLaunch  
</span><span class='line'>{  
</span><span class='line'>    //还未登录过  
</span><span class='line'>    if(![[NSUserDefaults standardUserDefaults] boolForKey:@"everLaunched"]){  
</span><span class='line'>        //设置第二次使用的value值为yes  
</span><span class='line'>        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"everLaunched"];  
</span><span class='line'>        //设置第一次使用的value值为yes  
</span><span class='line'>        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"firstLaunch"];  
</span><span class='line'>    }else{  
</span><span class='line'>        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"firstLaunch"];  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"firstLaunch"]) {  
</span><span class='line'>        WelcomeViewController *welcomeVC = [[WelcomeViewController alloc] init];  
</span><span class='line'>        [self.window setRootViewController:welcomeVC];  
</span><span class='line'>        [welcomeVC release];  
</span><span class='line'>    }else{  
</span><span class='line'>        RootViewController *rootVC = [[RootViewController alloc] init];  
</span><span class='line'>        [self.window setRootViewController:rootVC];  
</span><span class='line'>        [rootVC release];  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions  
</span><span class='line'>{  
</span><span class='line'>    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];  
</span><span class='line'>    // Override point for customization after application launch.  
</span><span class='line'>      
</span><span class='line'>    [self isFirstLaunch];  
</span><span class='line'>    self.window.backgroundColor = [UIColor whiteColor];  
</span><span class='line'>    [self.window makeKeyAndVisible];  
</span><span class='line'>    return YES;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<p>NSUserDefaults类为访问普通类型的变量提供便利的方法，这些类型有floats,doubles,integers,booleans和URLs。一个默认的对象必须是一个属性列表，是NSData,NSString,NSNumber,NSDate,NSArray或者NSDictionary的实例。如果你想存储其它类型的对象，你应当将其转换成一个NSData的实例。</p>

<p>下面举例说明保存自定义对象Student到NSUserDefaults中，然后从NSUserDefaults中再读取出数据。</p>

<p>这里面包含了存取一个自定义对象和存取多个自定义对象这两种情况。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  AppDelegate.m  
</span><span class='line'>//  UserDefaultsDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-11-20.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "AppDelegate.h"  
</span><span class='line'>#import "WelcomeViewController.h"  
</span><span class='line'>#import "RootViewController.h"  
</span><span class='line'>#import "Student.h"  
</span><span class='line'>  
</span><span class='line'>@implementation AppDelegate  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [_window release];  
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)isFirstLaunch  
</span><span class='line'>{  
</span><span class='line'>    //还未登录过  
</span><span class='line'>    if(![[NSUserDefaults standardUserDefaults] boolForKey:@"everLaunched"]){  
</span><span class='line'>        //设置第二次使用的value值为yes  
</span><span class='line'>        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"everLaunched"];  
</span><span class='line'>        //设置第一次使用的value值为yes  
</span><span class='line'>        [[NSUserDefaults standardUserDefaults] setBool:YES forKey:@"firstLaunch"];  
</span><span class='line'>        Student *stu = [[Student alloc] init];  
</span><span class='line'>        NSLog(@"stu.name = %@\nstu.age = %d\nstu.height = %f\n", stu.name, [stu.age integerValue], [stu.height floatValue]);  
</span><span class='line'>  
</span><span class='line'>        [self saveCustomObjectToUerDefaults:stu];  
</span><span class='line'>        [stu release];  
</span><span class='line'>    }else{  
</span><span class='line'>        [[NSUserDefaults standardUserDefaults] setBool:NO forKey:@"firstLaunch"];  
</span><span class='line'>        [self saveManyStudentInfo];  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    if ([[NSUserDefaults standardUserDefaults] boolForKey:@"firstLaunch"]) {  
</span><span class='line'>        WelcomeViewController *welcomeVC = [[WelcomeViewController alloc] init];  
</span><span class='line'>        [self.window setRootViewController:welcomeVC];  
</span><span class='line'>        [welcomeVC release];  
</span><span class='line'>    }else{  
</span><span class='line'>        RootViewController *rootVC = [[RootViewController alloc] init];  
</span><span class='line'>        [self.window setRootViewController:rootVC];  
</span><span class='line'>        [rootVC release];  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//保存多个自定义对象Student到NSUserDefaults中  
</span><span class='line'>- (void)saveManyStudentInfo  
</span><span class='line'>{  
</span><span class='line'>    NSMutableArray *stuArray = [[NSMutableArray alloc] init];  
</span><span class='line'>    for (int i = 0; i &lt; 10; i++) {  
</span><span class='line'>        Student *stu = [[Student alloc] init];  
</span><span class='line'>        stu.name = [NSString stringWithFormat:@"Stu%d", i+1];  
</span><span class='line'>        stu.age = [NSNumber numberWithInteger:i+1];  
</span><span class='line'>        stu.height = [NSNumber numberWithFloat:170.3 + i];  
</span><span class='line'>        [stuArray addObject:stu];  
</span><span class='line'>        [stu release];  
</span><span class='line'>    }  
</span><span class='line'>    [[NSUserDefaults standardUserDefaults] setObject:[NSKeyedArchiver archivedDataWithRootObject:stuArray] forKey:@"students"];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//从nsuserDefaults加载多个自定义对象Student  
</span><span class='line'>- (NSArray *)loadManyStudentWithKey:(NSString *)key  
</span><span class='line'>{  
</span><span class='line'>      
</span><span class='line'>    NSData *data = [[NSUserDefaults standardUserDefaults] objectForKey:@"students"];  
</span><span class='line'>    NSArray *stuArray = [NSKeyedUnarchiver unarchiveObjectWithData:data];  
</span><span class='line'>    return [stuArray retain];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//保存自定义的对象到NSUserDefaults中  
</span><span class='line'>- (void)saveCustomObjectToUerDefaults:(Student *)student  
</span><span class='line'>{  
</span><span class='line'>    NSData *encodedCustomObject = [NSKeyedArchiver archivedDataWithRootObject:student];  
</span><span class='line'>    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];  
</span><span class='line'>    [userDefaults setObject:encodedCustomObject forKey:@"student"];  
</span><span class='line'>    [userDefaults synchronize];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//从NSuserDefaults中加载自定义的对象  
</span><span class='line'>- (Student *)loadCustomObjectWithKey:(NSString *)key  
</span><span class='line'>{  
</span><span class='line'>    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];  
</span><span class='line'>    NSData *stuData = [userDefaults objectForKey:key];  
</span><span class='line'>    Student *student = [NSKeyedUnarchiver unarchiveObjectWithData:stuData];  
</span><span class='line'>      
</span><span class='line'>    return student;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions  
</span><span class='line'>{  
</span><span class='line'>    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];  
</span><span class='line'>    // Override point for customization after application launch.  
</span><span class='line'>  
</span><span class='line'>    [self isFirstLaunch];  
</span><span class='line'>      
</span><span class='line'>    Student *stu = [self loadCustomObjectWithKey:@"student"];  
</span><span class='line'>    NSLog(@"stu.name = %@\nstu.age = %d\nstu.height = %f\n", stu.name, [stu.age integerValue], [stu.height floatValue]);  
</span><span class='line'>      
</span><span class='line'>    NSArray *arr = [self loadManyStudentWithKey:@"students"];  
</span><span class='line'>      
</span><span class='line'>    for (Student *student in arr) {  
</span><span class='line'>        NSLog(@"stu.name = %@\nstu.age = %d\nstu.height = %f\n", student.name, [student.age integerValue], [student.height floatValue]);  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    self.window.backgroundColor = [UIColor whiteColor];  
</span><span class='line'>    [self.window makeKeyAndVisible];  
</span><span class='line'>    return YES;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)applicationWillResignActive:(UIApplication *)application  
</span><span class='line'>{  
</span><span class='line'>    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.  
</span><span class='line'>    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)applicationDidEnterBackground:(UIApplication *)application  
</span><span class='line'>{  
</span><span class='line'>    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.   
</span><span class='line'>    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)applicationWillEnterForeground:(UIApplication *)application  
</span><span class='line'>{  
</span><span class='line'>    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)applicationDidBecomeActive:(UIApplication *)application  
</span><span class='line'>{  
</span><span class='line'>    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)applicationWillTerminate:(UIApplication *)application  
</span><span class='line'>{  
</span><span class='line'>    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<p>从NSUserDefaults返回的值都是不可变的。即使你设置了一个可变的值。例如，你设置了一个可变的字符串作为“MyStringDefault”的值，你用stringForKey:获取到的字符串将是不可变的。</p>

<p>默认数据库是为用户自动创建的。NSUserDefaults目前不支持per-host的偏好(设置)。要做到这一点，你必须使用CFPreferences API.然而，NSUserDefaults正确的读取per-host的偏好，所以你可以安全地混合CFPreferences与NSUserDefaults的代码。</p>

<p>如果你的应用程序支持管理的环境，你可以使用一个NSUserDefaults对象去决定哪些对用户有利的喜好是由管理员管理的。受管理的环境中对应的计算机实验室或教室管理员或教师肯能需要以一种特定的方式配置系统。在这种情况下，教师会建立一组默认的偏好设置并且强制对用户使用。如果以这种方式管理偏好设置，应用程序应该防止用户编辑，禁用任何适当的控制。</p>

<p>NSUserDefaults类是线程安全的。</p>

<h4>NSURL的持久性和文件引用的URLs</h4>

<p>当使用NSURL实例参考文件内的过程中，重要的是要基于位置的跟踪与文件系统的身份跟踪之间的区别。当坚持一个NSURL，你应该考虑采取这种行为。如果你的应用程序跟踪位于其身份的资源，那么当用户移动文件的时候你可以发觉到，那么你应该明确的解NSURL的书签数据或者对文件引用的URL进行编码。</p>

<p>如果你想通过文件的引用跟踪文件，但是当解析时你需要显式控制，你需要关心的把书签数据写到NSUserDefaults中，而不是依靠[NSUserDefaults setURL:forKey:]，当你知道你的应用程序将能够处理潜在的I/O所需的用户界面交互时允许你调用</p>

<pre><code>[NSURL URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:]
</code></pre>

<h4>沙盒注意事项</h4>

<p>一个沙盒应用不能访问和修改其他应用的偏好设置。例如，如果你使用addSuiteNamed:方法添加另一个应用程序，但是你不会获得该应用程序的偏好设置。</p>

<p>尝试去访问或者修改另一个应用的偏好设置不会导致错误，但是当你你做的时候，世纪上OS X读取和写入位于应用程序容器内的文件，而不是其他应用程序的偏好设置文件。</p>

<p>这就是使用NsuserDefaults来是数据持久化的，你可以<a href="http://download.csdn.net/detail/swplzj/6587287">点击这里来下载NSUserDefaultsDemo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 数据持久化（二）]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-(er-)/"/>
    <updated>2015-02-13T16:59:06+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-(er-)</id>
    <content type="html"><![CDATA[<p>iOS中有五种持久化数据的方式：属性列表、对象归档、NSUserDefaults、SQLite3和Core Data。
本文介绍对象归档来持久化数据。归档的作用就是将对象以文件的形式保存到磁盘中，以使得数据序列化和持久化。</p>

<!--more-->


<p>使用归档的时候读取该文件保存路径来读取文件的内容，归档的文件是进行过保密处理的，在磁盘上是无法查看文件的内容的，这也是和属性列表的区别：属性列表是明文，可以直接从磁盘查看其内容。
使用归档需要使用NSCoding协议中的代理两个方法</p>

<p>[objc] view plaincopy在CODE上查看代码片派生到我的代码片</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@protocol NSCoding  
</span><span class='line'>  
</span><span class='line'>- (void)encodeWithCoder:(NSCoder *)aCoder;  
</span><span class='line'>- (id)initWithCoder:(NSCoder *)aDecoder;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>自定义类进行归档：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  ScoreCard.h  
</span><span class='line'>//  ArchiverDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-19.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>//遵循NSCoding协议  
</span><span class='line'>@interface ScoreCard : NSObject&lt;NSCoding&gt;  
</span><span class='line'>{  
</span><span class='line'>    NSString *_bestTime;  
</span><span class='line'>    NSMutableArray *_allTimes;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@property (copy, nonatomic) NSString *bestTime;  
</span><span class='line'>@property (copy) NSMutableArray *allTimes;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  ScoreCard.m  
</span><span class='line'>//  ArchiverDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-19.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "ScoreCard.h"  
</span><span class='line'>  
</span><span class='line'>@implementation ScoreCard  
</span><span class='line'>  
</span><span class='line'>@synthesize bestTime = _bestTime;  
</span><span class='line'>@synthesize allTimes = _allTimes;  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [_bestTime release];  
</span><span class='line'>    [_allTimes release];  
</span><span class='line'>      
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (id)init  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        _bestTime = [[NSString alloc] init];  
</span><span class='line'>        _allTimes = [[NSMutableArray alloc] init];  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//解码方法  
</span><span class='line'>- (id)initWithCoder:(NSCoder *)aDecoder  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        _bestTime = [[aDecoder decodeObjectForKey:@"bestTime"] retain];  
</span><span class='line'>        _allTimes = [[aDecoder decodeObjectForKey:@"allTimes"] retain];  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//编码方法  
</span><span class='line'>- (void)encodeWithCoder:(NSCoder *)aCoder  
</span><span class='line'>{  
</span><span class='line'>    [aCoder encodeObject:_bestTime forKey:@"bestTime"];  
</span><span class='line'>    [aCoder encodeObject:_allTimes forKey:@"allTimes"];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  Athlete.h  
</span><span class='line'>//  ArchiverDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-19.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>  
</span><span class='line'>@class ScoreCard;  
</span><span class='line'>  
</span><span class='line'>//遵守NSCoding 协议  
</span><span class='line'>@interface Athlete : NSObject&lt;NSCoding&gt;  
</span><span class='line'>{  
</span><span class='line'>    NSString *_name;  
</span><span class='line'>    NSString *_bio;  
</span><span class='line'>    NSString *_phoneNumber;  
</span><span class='line'>    ScoreCard *_scoreCard;  
</span><span class='line'>    BOOL _eligible;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@property (copy) NSString *name, *bio, *phoneNumber;  
</span><span class='line'>@property (retain) ScoreCard *scoreCard;  
</span><span class='line'>@property (getter = isEligible) BOOL eligible;  
</span><span class='line'>  
</span><span class='line'>- (void)print;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  Athlete.m  
</span><span class='line'>//  ArchiverDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-19.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "Athlete.h"  
</span><span class='line'>#import "ScoreCard.h"  
</span><span class='line'>  
</span><span class='line'>@implementation Athlete  
</span><span class='line'>  
</span><span class='line'>@synthesize name = _name, bio = _bio, phoneNumber = _phoneNumber, scoreCard = _scoreCard, eligible = _eligible;  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [_name release];  
</span><span class='line'>    [_bio release];  
</span><span class='line'>    [_scoreCard release];  
</span><span class='line'>  
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (id)init  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        _name = [[NSString alloc] init];  
</span><span class='line'>        _bio = [[NSString alloc] init];  
</span><span class='line'>        _phoneNumber = [[NSString alloc] init];  
</span><span class='line'>        _scoreCard = [[ScoreCard alloc] init];  
</span><span class='line'>        _eligible = YES;  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//解码方法  
</span><span class='line'>- (id)initWithCoder:(NSCoder *)aDecoder  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        _name = [[aDecoder decodeObjectForKey:@"name"] retain];  
</span><span class='line'>        _bio = [[aDecoder decodeObjectForKey:@"bio"] retain];  
</span><span class='line'>        _scoreCard = [[aDecoder decodeObjectForKey:@"scoreCard"] retain];  
</span><span class='line'>        //BOOL类型变量解码  
</span><span class='line'>        _eligible = [aDecoder decodeBoolForKey:@"eligible"];  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//编码方法  
</span><span class='line'>- (void)encodeWithCoder:(NSCoder *)aCoder  
</span><span class='line'>{  
</span><span class='line'>    [aCoder encodeObject:_name forKey:@"name"];  
</span><span class='line'>    [aCoder encodeObject:_bio forKey:@"bio"];  
</span><span class='line'>    [aCoder encodeObject:_scoreCard forKey:@"scoreCard"];  
</span><span class='line'>    //BOOL类型变量归档  
</span><span class='line'>    [aCoder encodeBool:_eligible forKey:@"eligible"];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)print  
</span><span class='line'>{  
</span><span class='line'>    NSLog(@"Name: %@\nBio: %@\nTel: %@\n\nBest Time: %@\n\nAll Times:", _name, _bio, _phoneNumber, [_scoreCard bestTime]);  
</span><span class='line'>    for (NSString *time in [_scoreCard allTimes]) {  
</span><span class='line'>        NSLog(@"%@", time);  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  Roster.h  
</span><span class='line'>//  ArchiverDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-19.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>  
</span><span class='line'>@class Athlete;  
</span><span class='line'>  
</span><span class='line'>//遵循归档NSCoding协议  
</span><span class='line'>@interface Roster : NSObject&lt;NSCoding&gt;  
</span><span class='line'>{  
</span><span class='line'>    NSMutableArray *_athletes;  
</span><span class='line'>    int _rank;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@property (retain) NSMutableArray *athletes;  
</span><span class='line'>@property int rank;  
</span><span class='line'>  
</span><span class='line'>- (void)create;  
</span><span class='line'>- (void)print;  
</span><span class='line'>- (void)addAthlete:(Athlete *)athlete;  
</span><span class='line'>  
</span><span class='line'>@end  
</span><span class='line'>
</span><span class='line'>[objc] view plaincopy在CODE上查看代码片派生到我的代码片
</span><span class='line'>//  
</span><span class='line'>//  Roster.m  
</span><span class='line'>//  ArchiverDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-19.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "Roster.h"  
</span><span class='line'>#import "ScoreCard.h"  
</span><span class='line'>#import "Athlete.h"  
</span><span class='line'>  
</span><span class='line'>static NSString *names [] = { @"John Doe",  
</span><span class='line'>    @"Jane Doe", @"Shaun White", @"Jeff Beck",  
</span><span class='line'>    @"Eric Clapton", @"Angus Young", @"Flavius Josephus" };  
</span><span class='line'>  
</span><span class='line'>@implementation Roster  
</span><span class='line'>  
</span><span class='line'>@synthesize athletes = _athletes, rank = _rank;  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [_athletes release];  
</span><span class='line'>      
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)create  
</span><span class='line'>{  
</span><span class='line'>    NSMutableArray *scoreArray = [NSMutableArray arrayWithObjects:@"21:32:21", @"12:48:11", @"16:11:32", nil nil];  
</span><span class='line'>    for(int i = 0; i &lt; 7; ++i){  
</span><span class='line'>        Athlete *athlete = [[Athlete alloc] init];  
</span><span class='line'>        athlete.name = names[i];  
</span><span class='line'>        athlete.bio = @"I'm a boss";  
</span><span class='line'>        [athlete setPhoneNumber:@"321-3241"];  
</span><span class='line'>        athlete.scoreCard.bestTime = @"12:30:22";  
</span><span class='line'>        athlete.scoreCard.allTimes = scoreArray;  
</span><span class='line'>        [self addAthlete:athlete];  
</span><span class='line'>        [athlete release];  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (id)init  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        _rank = 0;  
</span><span class='line'>        _athletes = [[NSMutableArray alloc] init];  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//解码方法  
</span><span class='line'>- (id)initWithCoder:(NSCoder *)aDecoder  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        _athletes = [[aDecoder decodeObjectForKey:@"athletes"] retain];  
</span><span class='line'>        //解码int类型变量  
</span><span class='line'>        _rank = [aDecoder decodeIntForKey:@"rank"];  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)encodeWithCoder:(NSCoder *)aCoder  
</span><span class='line'>{  
</span><span class='line'>    [aCoder encodeObject:_athletes forKey:@"athletes"];  
</span><span class='line'>    [aCoder encodeInt:_rank forKey:@"rank"];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)addAthlete:(Athlete *)athlete  
</span><span class='line'>{  
</span><span class='line'>    [_athletes addObject:athlete];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)print  
</span><span class='line'>{  
</span><span class='line'>    NSLog(@"Roster info:\nRank: %d", _rank);  
</span><span class='line'>    for (Athlete *athlete in _athletes) {  
</span><span class='line'>        NSLog(@"%@", [athlete name]);  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>在main函数里面进行归档</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  main.m  
</span><span class='line'>//  ArchiverDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-19.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;UIKit/UIKit.h&gt;  
</span><span class='line'>#import "Roster.h"  
</span><span class='line'>  
</span><span class='line'>#define ARCHIVE 0  
</span><span class='line'>#define UNARCHIVE 1  
</span><span class='line'>  
</span><span class='line'>int main(int argc, charchar *argv[])  
</span><span class='line'>{  
</span><span class='line'>    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];  
</span><span class='line'>    //获得根路径  
</span><span class='line'>    NSString *homePath = [[NSBundle mainBundle] executablePath];  
</span><span class='line'>    //按照“/”分解字符串到数组  
</span><span class='line'>    NSArray *strings = [homePath componentsSeparatedByString:@"/"];  
</span><span class='line'>    //  
</span><span class='line'>    NSString *executbleName = [strings objectAtIndex:[strings count] - 1];  
</span><span class='line'>    NSString *baseDirectory = [homePath substringToIndex:[homePath length] - [executbleName length] - 1];  
</span><span class='line'>    //文件名字  
</span><span class='line'>    NSString *fileName = [NSString stringWithFormat:@"%@/roster.archive", baseDirectory];  
</span><span class='line'>    NSLog(@"filePath: %@", fileName);  
</span><span class='line'>  
</span><span class='line'>#if ARCHIVE  
</span><span class='line'>    //创建并归档一个roster  
</span><span class='line'>    Roster *roster = [[Roster alloc] init];  
</span><span class='line'>    [roster create];  
</span><span class='line'>    //把对象写到二进制流中去  
</span><span class='line'>    [NSKeyedArchiver archiveRootObject:roster toFile:fileName];  
</span><span class='line'>    [roster release];  
</span><span class='line'>#endif  
</span><span class='line'>      
</span><span class='line'>#if UNARCHIVE  
</span><span class='line'>    //已经写入到磁盘，直接从二进制流读取对象  
</span><span class='line'>    Roster *unarchive = [NSKeyedUnarchiver unarchiveObjectWithFile:fileName];  
</span><span class='line'>    [unarchive print];  
</span><span class='line'>    for (Athlete *athlete in [unarchive athletes]) {  
</span><span class='line'>        [athlete print];  
</span><span class='line'>    }  
</span><span class='line'>    [unarchive release];  
</span><span class='line'>#endif  
</span><span class='line'>      
</span><span class='line'>    [pool release];  
</span><span class='line'>      
</span><span class='line'>    return 0;  
</span><span class='line'>}  </span></code></pre></td></tr></table></div></figure>


<h4>运行程序，前往文件夹：</h4>

<pre><code>/Users/issuser/Library/Application Support/iPhone Simulator/6.1/Applications/74C8943C-BE5F-4BB7-8385-8E922AF29589/ArchiverDemo.app/roster.archive
</code></pre>

<h4>归档成功。</h4>

<p><a href="http://download.csdn.net/detail/swplzj/6581137">点击这里下载ArchiverDemo</a></p>

<p>这就是使用归档来达到数据的持久化。你也来试试吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 数据持久化(一)]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-%5B%3F%5D/"/>
    <updated>2015-02-13T16:46:33+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-shu-ju-chi-jiu-hua-[?]</id>
    <content type="html"><![CDATA[<p>iOS中有五种持久化数据的方式：属性列表、对象归档、NSUserDefault、SQLite3和Core Data
本文章讲述通过属性列表的方式持久化数据，这个方法也是我们平时最经常用到的方式。比如应用程序的配置和个性化的设置，一般都是通过属性列表（properties list） plist文件来存储和读取的。</p>

<!--more-->


<p>[objc] view plaincopy在CODE上查看代码片派生到我的代码片</p>

<pre><code>FOUNDATION_EXPORT NSArray *NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde);  
</code></pre>

<p>这个函数的作用：创建一个目录搜索路径的列表。
创建一个路径字符串列表指定域中指定的目录。列表中的顺序，你应该搜索目录。</p>

<p>PS：
通过此方法返回的目录可能不存在。这种方法只是给你请求目录的适当位置。根据应用的需求，它可能是开发者创建合适的目录或者在任何两者之间。</p>

<p>下面是一个把数据以plist的形式保存到本地的自定义类</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  Plist.h  
</span><span class='line'>//  PlistDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-20.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>  
</span><span class='line'>@interface Plist : NSObject  
</span><span class='line'>  
</span><span class='line'>- (void)modifyData:(NSString *)dataKey Value:(NSString *)dataValue;  
</span><span class='line'>- (void)deleteDataWithDataKey:(NSString *)key;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  Plist.m  
</span><span class='line'>//  PlistDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-20.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "Plist.h"  
</span><span class='line'>  
</span><span class='line'>@implementation Plist  
</span><span class='line'>  
</span><span class='line'>- (id)init  
</span><span class='line'>{  
</span><span class='line'>    if (self = [super init]) {  
</span><span class='line'>        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);  
</span><span class='line'>        //获取完整路径  
</span><span class='line'>        NSString *documentsDirectory = [paths objectAtIndex:0];  
</span><span class='line'>        NSLog(@"homeDirectory = %@", documentsDirectory);  
</span><span class='line'>        NSString *plistPath = [documentsDirectory stringByAppendingPathComponent:@"student.plist"];  
</span><span class='line'>        //判断是否已经创建文件  
</span><span class='line'>        if ([[NSFileManager defaultManager] fileExistsAtPath:plistPath]) {  
</span><span class='line'>            NSLog(@"student.plist文件已经存在！");  
</span><span class='line'>        }else {  
</span><span class='line'>            //plist文件没有被创建  
</span><span class='line'>            NSMutableDictionary *rootDic = [[NSMutableDictionary alloc] init];  
</span><span class='line'>            NSMutableDictionary *subDic = [[NSMutableDictionary alloc] init];  
</span><span class='line'>            [rootDic setObject:subDic forKey:@"student"];  
</span><span class='line'>            [subDic release];  
</span><span class='line'>            //写入到文件  
</span><span class='line'>            [rootDic writeToFile:plistPath atomically:YES];  
</span><span class='line'>            [rootDic release];  
</span><span class='line'>        }  
</span><span class='line'>    }  
</span><span class='line'>      
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//把数据写入到plist文件中  
</span><span class='line'>- (void)modifyData:(NSString *)dataKey Value:(NSString *)dataValue  
</span><span class='line'>{  
</span><span class='line'>    //获取路径  
</span><span class='line'>    NSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingPathComponent:@"student.plist"];  
</span><span class='line'>    NSMutableDictionary *rootDic = [[[NSMutableDictionary alloc] initWithContentsOfFile:path] mutableCopy];  
</span><span class='line'>    NSMutableDictionary *studentInfo = [rootDic objectForKey:@"student"];  
</span><span class='line'>    NSString *name = [studentInfo objectForKey:dataKey];  
</span><span class='line'>    name = dataValue;  
</span><span class='line'>    [studentInfo setValue:name forKey:dataKey];  
</span><span class='line'>    //写入到文件  
</span><span class='line'>    [rootDic writeToFile:path atomically:YES];  
</span><span class='line'>    NSLog(@"Key - Value: %@ - %@",dataKey, dataValue );  
</span><span class='line'>    [rootDic release];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>//根据key来删除某一行的数据  
</span><span class='line'>- (void)deleteDataWithDataKey:(NSString *)key  
</span><span class='line'>{  
</span><span class='line'>    //获取路径  
</span><span class='line'>    NSString *path = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0] stringByAppendingPathComponent:@"student.plist"];  
</span><span class='line'>    NSMutableDictionary *rootDic = [[[NSMutableDictionary alloc] initWithContentsOfFile:path] mutableCopy];  
</span><span class='line'>    NSMutableDictionary *studentInfo = [rootDic objectForKey:@"student"];  
</span><span class='line'>    [studentInfo removeObjectForKey:key];  
</span><span class='line'>    NSLog(@"Delete data key - value: %@ - %@", key, [studentInfo objectForKey:key]);  
</span><span class='line'>    [rootDic setValue:studentInfo forKey:@"student"];  
</span><span class='line'>    //写入到文件  
</span><span class='line'>    [rootDic writeToFile:path atomically:YES];  
</span><span class='line'>    [rootDic release];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h5>在RootViewController里面的代码</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  RootViewController.m  
</span><span class='line'>//  PlistDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by swplzj on 13-11-20.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "RootViewController.h"  
</span><span class='line'>#import "Plist.h"  
</span><span class='line'>  
</span><span class='line'>@interface RootViewController ()  
</span><span class='line'>  
</span><span class='line'>@property (retain, nonatomic) Plist *plistFile;  
</span><span class='line'>  
</span><span class='line'>@property (retain, nonatomic) IBOutlet UITextField *keyTF;  
</span><span class='line'>@property (retain, nonatomic) IBOutlet UITextField *valueTF;  
</span><span class='line'>@property (retain, nonatomic) IBOutlet UITextField *deleteKeyTF;  
</span><span class='line'>@end  
</span><span class='line'>  
</span><span class='line'>@implementation RootViewController  
</span><span class='line'>  
</span><span class='line'>- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil  
</span><span class='line'>{  
</span><span class='line'>    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];  
</span><span class='line'>    if (self) {  
</span><span class='line'>        // Custom initialization  
</span><span class='line'>    }  
</span><span class='line'>    return self;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)viewDidLoad  
</span><span class='line'>{  
</span><span class='line'>    [super viewDidLoad];  
</span><span class='line'>    // Do any additional setup after loading the view from its nib.  
</span><span class='line'>    _plistFile = [[Plist alloc] init];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)didReceiveMemoryWarning  
</span><span class='line'>{  
</span><span class='line'>    [super didReceiveMemoryWarning];  
</span><span class='line'>    // Dispose of any resources that can be recreated.  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (IBAction)addOrModifyBtnClicked:(id)sender {  
</span><span class='line'>    if (![_keyTF.text isEqualToString:@""] && ![_valueTF.text isEqualToString:@""]) {  
</span><span class='line'>        [_plistFile modifyData:_keyTF.text Value:_valueTF.text];   
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (IBAction)deleteBtnClicked:(id)sender {  
</span><span class='line'>    if (![_deleteKeyTF.text isEqualToString:@""]) {  
</span><span class='line'>        [_plistFile deleteDataWithDataKey:_deleteKeyTF.text];  
</span><span class='line'>    }  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc {  
</span><span class='line'>    [_plistFile release];  
</span><span class='line'>    [_keyTF release];  
</span><span class='line'>    [_valueTF release];  
</span><span class='line'>    [_deleteKeyTF release];  
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h5>效果</h5>

<p><img src="http://img.blog.csdn.net/20131120140040890?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3dwbHpq/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="id1" /></p>

<h5>前往文件夹：</h5>

<pre><code>/Users/issuser/Library/Application Support/iPhone Simulator/6.1/Applications/A40F6B2C-002A-4797-B501-3ABCBE59723A/Documents
</code></pre>

<p><img src="http://img.blog.csdn.net/20131120140111546?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3dwbHpq/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="id2" /></p>

<h5>plist文件中的内容：</h5>

<p><img src="http://img.blog.csdn.net/20131120140135937?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3dwbHpq/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="id3" /></p>

<p>好了，这就是通过属性列表plist文件来达到数据持久化的目的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS NSInvocation的学习]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-nsinvocationde-xue-xi/"/>
    <updated>2015-02-13T16:38:21+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-nsinvocationde-xue-xi</id>
    <content type="html"><![CDATA[<h4>用途：</h4>

<p>NSInvocation的作用和performSelector:withObject:的作用是一样的：用于iOS编程中调用某个对象的消息。</p>

<p>performSelector:withObject:调用一些参数较少的消息是比较方便的，但是对于参数个数大于2的消息，使用NSInvocation还是比较方便的。</p>

<p>因为NSInvocation是静态的呈现Objective-C的消息，也就是说，它把一个行动变成了一个对象。NSInvocation对象用于对象之间和应用程序之间存储和转发消息，主要通过NSTimer对象和分布式对象系统来完成。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  NSInvocation+Improved.h  
</span><span class='line'>//  InvocationDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-12-11.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>  
</span><span class='line'>@interface NSInvocation (Improved)  
</span><span class='line'>  
</span><span class='line'>+ (NSInvocation *)invocationWithTarget:(id)_target andSelector:(SEL)_selector;  
</span><span class='line'>+ (NSInvocation *)invocationWithTarget:(id)_target andSelector:(SEL)_selector andArguments:(voidvoid *)_addressOfFirstArgument, ...;  
</span><span class='line'>- (void)invokeOnMainThreadWaitUntilDone:(BOOL)wait;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  NSInvocation+Improved.m  
</span><span class='line'>//  InvocationDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-12-11.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "NSInvocation+Improved.h"  
</span><span class='line'>  
</span><span class='line'>@implementation NSInvocation (Improved)  
</span><span class='line'>  
</span><span class='line'>+ (NSInvocation *)invocationWithTarget:(id)_target andSelector:(SEL)_selector  
</span><span class='line'>{  
</span><span class='line'>    //方法签名类  
</span><span class='line'>    //需要给定一个方法，用于必须创建一个NSInvocation对象的情况下，例如在消息的转发。  
</span><span class='line'>    NSMethodSignature *methodSig = [_target methodSignatureForSelector:_selector];  
</span><span class='line'>    //根据方法签名类来创建一个NSInvocation  
</span><span class='line'>    /* 
</span><span class='line'>     一个NSInvocation是静态的呈现Objective-C的消息，也就是说，它是一个行动变成了一个对象。 NSInvocation对象用于对象之间和在应用程序之间存储和转发消息，主要通过NSTimer对象和分布式对象系统来完成。 
</span><span class='line'>    */  
</span><span class='line'>    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];  
</span><span class='line'>    [invocation setTarget:_target];  
</span><span class='line'>    [invocation setSelector:_selector];  
</span><span class='line'>    return invocation;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>+ (NSInvocation *)invocationWithTarget:(id)_target andSelector:(SEL)_selector andArguments:(voidvoid *)_addressOfFirstArgument, ...  
</span><span class='line'>{  
</span><span class='line'>    NSMethodSignature *methodSig = [_target methodSignatureForSelector:_selector];  
</span><span class='line'>    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSig];  
</span><span class='line'>    [invocation setTarget:_target];  
</span><span class='line'>    [invocation setSelector:_selector];  
</span><span class='line'>    //获得签名类对象的参数个数  
</span><span class='line'>    unsigned int numArgs = [methodSig numberOfArguments];  
</span><span class='line'>    //PS:atIndex的下标必须从2开始。原因：0 1 两个参数已经被target 和selector占用  
</span><span class='line'>    if (2 &lt; numArgs) {  
</span><span class='line'>        /* 
</span><span class='line'>         VA_LIST 是在C语言中解决变参问题的一组宏，所在头文件：#include &lt;stdarg.h&gt; 
</span><span class='line'>         VA_START宏，获取可变参数列表的第一个参数的地址（ap是类型为va_list的指针，v是可变参数最左边的参数） 
</span><span class='line'>         VA_ARG宏，获取可变参数的当前参数，返回指定类型并将指针指向下一参数（t参数描述了当前参数的类型） 
</span><span class='line'>         VA_END宏，清空va_list可变参数列表 
</span><span class='line'>         */  
</span><span class='line'>          
</span><span class='line'>        /* 
</span><span class='line'>         用法： 
</span><span class='line'>         （1）首先在函数里定义一具VA_LIST型的变量，这个变量是指向参数的指针； 
</span><span class='line'>         （2）然后用VA_START宏初始化刚定义的VA_LIST变量； 
</span><span class='line'>         （3）然后用VA_ARG返回可变的参数，VA_ARG的第二个参数是你要返回的参数的类型（如果函数有多个可变参数的，依次调用VA_ARG获取各个参数）； 
</span><span class='line'>         （4）最后用VA_END宏结束可变参数的获取。 
</span><span class='line'>         */  
</span><span class='line'>        va_list varargs;  
</span><span class='line'>          
</span><span class='line'>        va_start(varargs, _addressOfFirstArgument);  
</span><span class='line'>        [invocation setArgument:_addressOfFirstArgument atIndex:2];  
</span><span class='line'>          
</span><span class='line'>        for (int argIndex = 3; argIndex &lt; numArgs; argIndex++) {  
</span><span class='line'>            voidvoid *argp = va_arg(varargs, voidvoid *);  
</span><span class='line'>            [invocation setArgument:argp atIndex:argIndex];  
</span><span class='line'>        }  
</span><span class='line'>          
</span><span class='line'>        va_end(varargs);  
</span><span class='line'>    }  
</span><span class='line'>    return invocation;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)invokeOnMainThreadWaitUntilDone:(BOOL)wait  
</span><span class='line'>{  
</span><span class='line'>    [self performSelectorOnMainThread:@selector(invoke) withObject:nil waitUntilDone:wait];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>自定义类：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  SomeClass.h  
</span><span class='line'>//  InvocationDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-12-11.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import &lt;Foundation/Foundation.h&gt;  
</span><span class='line'>  
</span><span class='line'>@interface SomeClass : NSObject  
</span><span class='line'>  
</span><span class='line'>- (void)commonOperation;  
</span><span class='line'>- (void)improvedOperation;  
</span><span class='line'>- (void)fireTimer:(NSDictionary *)user andDate:(NSDate *)startTime;  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  SomeClass.m  
</span><span class='line'>//  InvocationDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-12-11.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "SomeClass.h"  
</span><span class='line'>#import "NSInvocation+Improved.h"  
</span><span class='line'>  
</span><span class='line'>@implementation SomeClass  
</span><span class='line'>  
</span><span class='line'>- (void)commonOperation  
</span><span class='line'>{  
</span><span class='line'>    NSDate *date = [NSDate date];  
</span><span class='line'>    NSDictionary *user = [NSDictionary dictionaryWithObjectsAndKeys:@"value1", @"key1", nil nil];  
</span><span class='line'>    SEL method = @selector(fireTimer:andDate:);  
</span><span class='line'>    NSMethodSignature *signature = [[self class] instanceMethodSignatureForSelector:method];  
</span><span class='line'>    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];  
</span><span class='line'>    [invocation setTarget:self];  
</span><span class='line'>    [invocation setSelector:method];  
</span><span class='line'>    [invocation setArgument:&user atIndex:2];  
</span><span class='line'>    [invocation setArgument:&date atIndex:3];  
</span><span class='line'>//    [NSTimer scheduledTimerWithTimeInterval:0.1 invocation:invocation repeats:YES];  
</span><span class='line'>    [invocation invoke];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)improvedOperation  
</span><span class='line'>{  
</span><span class='line'>    //1.创建一个没有参数的NSInvocation  
</span><span class='line'>//    SEL selector = @selector(fireTimer:andDate:);  
</span><span class='line'>//    NSInvocation *invocation = [NSInvocation invocationWithTarget:self andSelector:selector];  
</span><span class='line'>      
</span><span class='line'>    //2.创建带有两个参数的NSInvocation  
</span><span class='line'>    NSDate *date = [NSDate date];  
</span><span class='line'>    NSDictionary *user = [NSDictionary dictionaryWithObjectsAndKeys:@"value1", @"key1", nil nil];  
</span><span class='line'>    NSInvocation *invocation = [NSInvocation invocationWithTarget:self andSelector:@selector(fireTimer:andDate:) andArguments:&user, &date];  
</span><span class='line'>    [invocation invoke];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (void)fireTimer:(NSDictionary *)user andDate:(NSDate *)startTime  
</span><span class='line'>{  
</span><span class='line'>    /* 
</span><span class='line'>     sleep 与 sleepForTimeInterval的区别 
</span><span class='line'>     sleep直接让线程停掉，sleepForTimeInterval是让runLoop停掉。比如说，你有2个APP，分别是A和B，A启动B，然后去取B的进程号，如果你用sleep等B启动再去取，你会发现取不到，因为你只是把代码加到runloop里面去，而runloop并没有执行到这句，sleep就直接让系统停在那里，所以取不到，而后者就没问题，因为它是让runloop执行到这句的时候停1s 
</span><span class='line'>     */  
</span><span class='line'>      
</span><span class='line'>    [NSThread sleepForTimeInterval:2];  
</span><span class='line'>    NSTimeInterval timeInterval = -11 * [startTime timeIntervalSinceNow];  
</span><span class='line'>    NSString *timeStr = [NSString stringWithFormat:@"%.2f", timeInterval];  
</span><span class='line'>    NSLog(@"fireTime: %@", timeStr);  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>


<h4>调用SomeClass：</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//  
</span><span class='line'>//  AppDelegate.m  
</span><span class='line'>//  InvocationDemo  
</span><span class='line'>//  
</span><span class='line'>//  Created by 李振杰 on 13-12-11.  
</span><span class='line'>//  Copyright (c) 2013年 swplzj. All rights reserved.  
</span><span class='line'>//  
</span><span class='line'>  
</span><span class='line'>#import "AppDelegate.h"  
</span><span class='line'>#import "SomeClass.h"  
</span><span class='line'>  
</span><span class='line'>@implementation AppDelegate  
</span><span class='line'>  
</span><span class='line'>- (void)dealloc  
</span><span class='line'>{  
</span><span class='line'>    [_window release];  
</span><span class='line'>    [super dealloc];  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions  
</span><span class='line'>{  
</span><span class='line'>    self.window = [[[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]] autorelease];  
</span><span class='line'>    // Override point for customization after application launch.  
</span><span class='line'>      
</span><span class='line'>    SomeClass *some = [[SomeClass alloc] init];  
</span><span class='line'>    [some commonOperation];  
</span><span class='line'>    [some improvedOperation];  
</span><span class='line'>    [some release];  
</span><span class='line'>      
</span><span class='line'>    self.window.backgroundColor = [UIColor whiteColor];  
</span><span class='line'>    [self.window makeKeyAndVisible];  
</span><span class='line'>    return YES;  
</span><span class='line'>}  
</span><span class='line'>  
</span><span class='line'>@end  </span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[九步确定你的人生目标和制定达到目标的计划]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/jiu-bu-que-ding-ni-de-ren-sheng-mu-biao-he-zhi-ding-da-dao-mu-biao-de-ji-hua/"/>
    <updated>2015-02-13T16:34:03+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/jiu-bu-que-ding-ni-de-ren-sheng-mu-biao-he-zhi-ding-da-dao-mu-biao-de-ji-hua</id>
    <content type="html"><![CDATA[<p>你想在五年之后，十年之后，或者一年之后的今天在哪？这些都是你的目标，你可不想一直呆在你现在的位置，但明确你的真正的目标是一件困难的事情。</p>

<p>很多人认为设定人生目标就是找一些遥遥无期的梦想，但永远不会实现。这被看成是只是预言如何实现自己抱负，因为，第一，这些目标没有被足够详细的定义；第二，它始终只是一个目标，而没有相应的行动。</p>

<!--more-->


<p>定义你的目标是一件需要你花费很多时间仔细考虑的事情。下面的步骤可以让你开始这样的旅程：</p>

<h4>写出一个你的人生目标的清单。</h4>

<p>人生目标是一件重要的事，换句话说，就是你的人生抱负，不过抱负听起来总像一种超出你可控范围的事情，而人生目标是，如果你 愿意投入精力去做，就可能达到的。因此，你这一生真正想要的是什么？什么是你真正想去完成的事情？什么事情如果你突然发现你不再有足够的时间去完成的时 候，会后悔不已？这些都是你的目标，把每个这样的目标用一句话写下来。 如果其中任何目标只是达到另外一个目标的关键步骤，把它从清单中去掉，因为他不是你的人生目标。</p>

<p>对于每一个目标，你需要设定一个你认为合适的时间框架。这就是你的十年计划，五年计划，还有你的一年计划。其中一些目标可能会有“搁置期”因为你的年龄、健康、经济状况等，这些你需要用来完成目标的因素需要花一些时间来达成。</p>

<p>下一步描绘你达到每一个人生目标的详细旅程——这才是更让人热血沸腾的部分。对于每一个人生目标，都按照下面的步骤来处理：</p>

<h4>把每个人生目标单独写在一张白纸的顶端。</h4>

<p>在每个目标下面写上你要完成这个目标所需要但是目前你又没有的资源。 这些东西可能是某种教育、职业生涯的改变、财务、新的技能等等。任何一个你在第１步里面去掉的关键步骤，都可以在这一步中补上。如果任何一个目标下面还有子目标，都可以补上，以保证你的每一步都有精确的行动相对应。</p>

<p>在第２步所列出的每项中，写下你要完成每一步所需要的行动。 这个可能是一个检查清单，这是你可以完成你的目标的所有确切的步骤。</p>

<p>检查你在第２步里面所写的时间框架，在每一张目标表上写下你所要完成目标的年份。对于那些没有确定年限的目标，考虑一下你想要在哪一年完成它并以此做为年限。</p>

<p>检查整个时间框架，为你所需要完成的每一小步，写下你所需要完成的现实时间。
现在检查你的整个人生目标，然后定一个你这周、这个月和今年的时间进度表——以便你自己可以按照预定的路程去完成你的目标。</p>

<p>把所有的目标完成时间点写在你的进度表上，这样你对要完成的事情就有了确定的时间了。在一年的结尾，回顾你在这一年里面所做的，划掉你在这一年里面已经完成的，写下你在下一年里面所要去完成的。</p>

<p>可能你需要花很多年的时间去，比如说，完成一次职位提升，因为你先要去找一份兼职工作以保证你可以获得更多的钱供你去上完一个在职课程以拿到MBA学 位，但你最终会到达你的目标，因为你不但计划好了你要得到什么，并且也计划好了要如何去得到，在得到之前你要做哪些步骤。恭喜！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二维码的生成细节和原理]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/er-wei-ma-de-sheng-cheng-xi-jie-he-yuan-li/"/>
    <updated>2015-02-13T15:37:29+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/er-wei-ma-de-sheng-cheng-xi-jie-he-yuan-li</id>
    <content type="html"><![CDATA[<p>二维码又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型：比如：字符，数字，日文，中文等等。这两天学习了一下二维码图片生成的相关细节，觉得这个玩意就是一个密码算法，在此写一这篇文章 ，揭露一下。供好学的人一同学习之。</p>

<!--more-->


<p>关于QR Code Specification，可参看这个PDF：<a href="http://raidenii.net/files/datasheets/misc/qr_code.pdf">http://raidenii.net/files/datasheets/misc/qr_code.pdf</a></p>

<h4>基础知识</h4>

<p>首先，我们先说一下二维码一共有40个尺寸。官方叫版本Version。Version 1是21 x 21的矩阵，Version 2是 25 x 25的矩阵，Version 3是29的尺寸，每增加一个version，就会增加4的尺寸，公式是：(V-1)<em>4 + 21（V是版本号） 最高Version 40，(40-1)</em>4+21 = 177，所以最高是177 x 177 的正方形。</p>

<p>下面我们看看一个二维码的样例：</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/QR-Code-Overview.jpeg" alt="id1" /></p>

<h6>定位图案</h6>

<p>Position Detection Pattern是定位图案，用于标记二维码的矩形大小。这三个定位图案有白边叫Separators for Postion Detection Patterns。之所以三个而不是四个意思就是三个就可以标识一个矩形了。</p>

<p>Timing Patterns也是用于定位的。原因是二维码有40种尺寸，尺寸过大了后需要有根标准线，不然扫描的时候可能会扫歪了。</p>

<p>Alignment Patterns 只有Version 2以上（包括Version2）的二维码需要这个东东，同样是为了定位用的。</p>

<h6>功能性数据</h6>

<p>Format Information 存在于所有的尺寸中，用于存放一些格式化数据的。
Version Information 在 >= Version 7以上，需要预留两块3 x 6的区域存放一些版本信息。
数据码和纠错码</p>

<p>除了上述的那些地方，剩下的地方存放 Data Code 数据码 和 Error Correction Code 纠错码。
数据编码</p>

<p>我们先来说说数据编码。QR码支持如下的编码：</p>

<p>Numeric mode 数字编码，从0到9。如果需要编码的数字的个数不是3的倍数，那么，最后剩下的1或2位数会被转成4或7bits，则其它的每3位数字会被编成 10，12，14bits，编成多长还要看二维码的尺寸（下面有一个表Table 3说明了这点）</p>

<p>Alphanumeric mode 字符编码。包括 0-9，大写的A到Z（没有小写），以及符号$ % * + – . / : 包括空格。这些字符会映射成一个字符索引表。如下所示：（其中的SP是空格，Char是字符，Value是其索引值） 编码的过程是把字符两两分组，然后转成下表的45进制，然后转成11bits的二进制，如果最后有一个落单的，那就转成6bits的二进制。而编码模式和字符的个数需要根据不同的Version尺寸编成9, 11或13个二进制（如下表中Table 3）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Alphanumeric-mode.png" alt="id2" /></p>

<p>Byte mode, 字节编码，可以是0-255的ISO-8859-1字符。有些二维码的扫描器可以自动检测是否是UTF-8的编码。</p>

<p>Kanji mode 这是日文编码，也是双字节编码。同样，也可以用于中文编码。日文和汉字的编码会减去一个值。如：在0X8140 to 0X9FFC中的字符会减去8140，在0XE040到0XEBBF中的字符要减去0XC140，然后把结果前两个16进制位拿出来乘以0XC0，然后再加上后两个16进制位，最后转成13bit的编码。如下图示例：</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Kanji-mode.png" alt="id3" /></p>

<p>Extended Channel Interpretation (ECI) mode 主要用于特殊的字符集。并不是所有的扫描器都支持这种编码。</p>

<p>Structured Append mode 用于混合编码，也就是说，这个二维码中包含了多种编码格式。</p>

<p>FNC1 mode 这种编码方式主要是给一些特殊的工业或行业用的。比如GS1条形码之类的。</p>

<p>简单起见，后面三种不会在本文 中讨论。</p>

<p>下面两张表中，</p>

<ul>
<li>Table 2 是各个编码格式的“编号”，这个东西要写在Format Information中。注：中文是1101</li>
<li>Table 3 表示了，不同版本（尺寸）的二维码，对于，数字，字符，字节和Kanji模式下，对于单个编码的2进制的位数。（在二维码的规格说明书中，有各种各样的编码规范表，后面还会提到）</li>
</ul>


<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Mode-Indicator.png" alt="id4" /></p>

<p>下面我们看几个示例，</p>

<h5>示例一：数字编码</h5>

<p>在Version 1的尺寸下，纠错级别为H的情况下，编码： 01234567</p>

<ol>
<li><p>把上述数字分成三组: 012 345 67</p></li>
<li><p>把他们转成二进制:  012 转成 0000001100；  345 转成 0101011001；  67 转成 1000011。</p></li>
<li><p>把这三个二进制串起来: 0000001100 0101011001 1000011</p></li>
<li><p>把数字的个数转成二进制 (version 1-H是10 bits ): 8个数字的二进制是 0000001000</p></li>
<li><p>把数字编码的标志0001和第4步的编码加到前面:  0001 0000001000 0000001100 0101011001 1000011</p></li>
</ol>


<h5>示例二：字符编码</h5>

<p>在Version 1的尺寸下，纠错级别为H的情况下，编码: AC-42</p>

<ol>
<li><p>从字符索引表中找到 AC-42 这五个字条的索引 (10,12,41,4,2)</p></li>
<li><p>两两分组: (10,12) (41,4) (2)</p></li>
</ol>


<p>3.把每一组转成11bits的二进制:</p>

<p>(10,12) 10<em>45+12 等于 462 转成 00111001110
(41,4) 41</em>45+4 等于 1849 转成 11100111001
(2) 等于 2 转成 000010</p>

<ol>
<li><p>把这些二进制连接起来：00111001110 11100111001 000010</p></li>
<li><p>把字符的个数转成二进制 (Version 1-H为9 bits ): 5个字符，5转成 000000101</p></li>
<li><p>在头上加上编码标识 0010 和第5步的个数编码:  0010 000000101 00111001110 11100111001 000010</p></li>
</ol>


<h4>结束符和补齐符</h4>

<p>假如我们有个HELLO WORLD的字符串要编码，根据上面的示例二，我们可以得到下面的编码，</p>

<p>编码   字符数   HELLO WORLD的编码
0010     000001011   01100001011 01111000110 10001011100 10110111000 10011010100 001101
我们还要加上结束符：</p>

<p>编码       字符数       HELLO WORLD的编码    结束
0010     000001011   01100001011 01111000110 10001011100 10110111000 10011010100 001101  0000</p>

<h5>按8bits重排</h5>

<p>如果所有的编码加起来不是8个倍数我们还要在后面加上足够的0，比如上面一共有78个bits，所以，我们还要加上2个0，然后按8个bits分好组：</p>

<p>00100000   01011011   00001011   01111000   11010001   01110010   11011100   01001101   01000011   01000000</p>

<h5>补齐码（Padding Bytes）</h5>

<p>最后，如果如果还没有达到我们最大的bits数的限制，我们还要加一些补齐码（Padding Bytes），Padding Bytes就是重复下面的两个bytes：11101100 00010001 （这两个二进制转成十进制是236和17，我也不知道为什么，只知道Spec上是这么写的）关于每一个Version的每一种纠错级别的最大Bits限制，可以参看QR Code Spec的第28页到32页的Table-7一表。</p>

<p>假设我们需要编码的是Version 1的Q纠错级，那么，其最大需要104个bits，而我们上面只有80个bits，所以，还需要补24个bits，也就是需要3个Padding Bytes，我们就添加三个，于是得到下面的编码：</p>

<p>00100000 01011011 00001011 01111000 11010001 01110010 11011100 01001101 01000011 01000000 11101100 00010001 11101100</p>

<p>上面的编码就是数据码了，叫Data Codewords，每一个8bits叫一个codeword，我们还要对这些数据码加上纠错信息。</p>

<h4>纠错码</h4>

<p>上面我们说到了一些纠错级别，Error Correction Code Level，二维码中有四种级别的纠错，这就是为什么二维码有残缺还能扫出来，也就是为什么有人在二维码的中心位置加入图标。</p>

<p>错误修正容量
L水平  7%的字码可被修正
M水平  15%的字码可被修正
Q水平  25%的字码可被修正
H水平  30%的字码可被修正</p>

<p>那么，QR是怎么对数据码加上纠错码的？首先，我们需要对数据码进行分组，也就是分成不同的Block，然后对各个Block进行纠错编码，对于如何分组，我们可以查看QR Code Spec的第33页到44页的Table-13到Table-22的定义表。注意最后两列：</p>

<ul>
<li>Number of Error Code Correction Blocks ：需要分多少个块。</li>
<li>Error Correction Code Per Blocks：每一个块中的code个数，所谓的code的个数，也就是有多少个8bits的字节。</li>
</ul>


<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Error-Correction-Blocks.png" alt="id5" /></p>

<p>举个例子：上述的Version 5 + Q纠错级：需要4个Blocks（2个Blocks为一组，共两组），头一组的两个Blocks中各15个bits数据 + 各 9个bits的纠错码（注：表中的codewords就是一个8bits的byte）（再注：最后一例中的（c, k, r ）的公式为：c = k + 2 * r，因为后脚注解释了：纠错码的容量小于纠错码的一半）</p>

<p>下图给一个5-Q的示例（因为二进制写起来会让表格太大，所以，我都用了十进制，我们可以看到每一块的纠错码有18个codewords，也就是18个8bits的二进制数）</p>

<p>组  块     数据  对每个块的纠错码
1    1   67 85 70 134 87 38 85 194 119 50 6 18 6 103 38  213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39
2    246 246 66 7 118 134 242 7 38 86 22 198 199 146 6   87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133
2    1   182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7    148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141
2    70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236  235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236</p>

<p>注：二维码的纠错码主要是通过Reed-Solomon error correction（里德-所罗门纠错算法）来实现的。对于这个算法，对于我来说是相当的复杂，里面有很多的数学计算，比如：多项式除法，把1-255的数映射成2的n次方（0&lt;=n&lt;=255）的伽罗瓦域Galois Field之类的神一样的东西，以及基于这些基础的纠错数学公式，因为我的数据基础差，对于我来说太过复杂，所以我一时半会儿还有点没搞明白，还在学习中，所以，我在这里就不展开说这些东西了。还请大家见谅了。（当然，如果有朋友很明白，也繁请教教我）</p>

<h4>最终编码</h4>

<h6>穿插放置</h6>

<p>如果你以为我们可以开始画图，你就错了。二维码的混乱技术还没有玩完，它还要把数据码和纠错码的各个codewords交替放在一起。如何交替呢，规则如下：</p>

<p>对于数据码：把每个块的第一个codewords先拿出来按顺度排列好，然后再取第一块的第二个，如此类推。如：上述示例中的Data Codewords如下：</p>

<p>块 1    67  85  70  134     87  38  85  194     119     50  6   18  6   103     38 <br/>
块 2    246     246     66  7   118     134     242     7   38  86  22  198     199     146     6  <br/>
块 3    182     230     247     119     50  7   118     134     87  38  82  6   134     151     50  7
块 4    70  247     118     86  194     6   151     50  16  236     17  236     17  236     17  236
我们先取第一列的：67， 246， 182， 70</p>

<p>然后再取第二列的：67， 246， 182， 70， 85，246，230 ，247</p>

<p>如此类推：67， 246， 182， 70， 85，246，230 ，247 ………  ……… ，38，6，50，17，7，236</p>

<p>对于纠错码，也是一样：</p>

<p>块 1    213     199     11  45  115     247     241     223     229     248     154     117     154     111     86  161     111     39
块 2    87  204     96  60  202     182     124     157     200     134     27  129     209     17  163     163     120     133
块 3    148     116     177     212     76  133     75  242     238     76  195     230     189     10  108     240     192     141
块 4    235     159     5   173     24  147     59  33  106     40  255     172     82  2   131     32  178     236
和数据码取的一样，得到：213，87，148，235，199，204，116，159，…… …… 39，133，141，236</p>

<p>然后，再把这两组放在一起（纠错码放在数据码之后）得到：</p>

<p>67, 246, 182, 70, 85, 246, 230, 247, 70, 66, 247, 118, 134, 7, 119, 86, 87, 118, 50, 194, 38, 134, 7, 6, 85, 242, 118, 151, 194, 7, 134, 50, 119, 38, 87, 16, 50, 86, 38, 236, 6, 22, 82, 17, 18, 198, 6, 236, 6, 199, 134, 17, 103, 146, 151, 236, 38, 6, 50, 17, 7, 236, 213, 87, 148, 235, 199, 204, 116, 159, 11, 96, 177, 5, 45, 60, 212, 173, 115, 202, 76, 24, 247, 182, 133, 147, 241, 124, 75, 59, 223, 157, 242, 33, 229, 200, 238, 106, 248, 134, 76, 40, 154, 27, 195, 255, 117, 129, 230, 172, 154, 209, 189, 82, 111, 17, 10, 2, 86, 163, 108, 131, 161, 163, 240, 32, 111, 120, 192, 178, 39, 133, 141, 236</p>

<p>这就是我们的数据区。</p>

<p>Remainder Bits
最后再加上Reminder Bits，对于某些Version的QR，上面的还不够长度，还要加上Remainder Bits，比如：上述的5Q版的二维码，还要加上7个bits，Remainder Bits加零就好了。关于哪些Version需要多少个Remainder bit，可以参看QR Code Spec的第15页的Table-1的定义表。</p>

<h4>画二维码图</h4>

<p>Position Detection Pattern
首先，先把Position Detection图案画在三个角上。（无论Version如何，这个图案的尺寸就是这么大）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/finder.png" alt="id6" /></p>

<p>Alignment Pattern
然后，再把Alignment图案画上（无论Version如何，这个图案的尺寸就是这么大）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/alignment-pattern.png" alt="id6" /></p>

<p>关于Alignment的位置，可以查看QR Code Spec的第81页的Table-E.1的定义表（下表是不完全表格）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Alignment-Position.png" alt="id7" /></p>

<p>下图是根据上述表格中的Version8的一个例子（6，24，42）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/alignment-example.png" alt="id8" /></p>

<p>Timing Pattern
接下来是Timing Pattern的线（这个不用多说了）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Timing-Pattern.png" alt="id9" /></p>

<p>Format Information
再接下来是Formation Information，下图中的蓝色部分。</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Format-Information.png" alt="id10" /></p>

<p>Format Information是一个15个bits的信息，每一个bit的位置如下图所示：（注意图中的Dark Module，那是永远出现的）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Format-Info-bits-postion.png" alt="id11" /></p>

<p>这15个bits中包括：</p>

<p>5个数据bits：其中，2个bits用于表示使用什么样的Error Correction Level， 3个bits表示使用什么样的Mask
10个纠错bits。主要通过BCH Code来计算
然后15个bits还要与101010000010010做XOR操作。这样就保证不会因为我们选用了00的纠错级别和000的Mask，从而造成全部为白色，这会增加我们的扫描器的图像识别的困难。</p>

<p>下面是一个示例：</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Format-Information-Example.png" alt="id12" /></p>

<p>关于Error Correction Level如下表所示：</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Error-Correction-Indicator-Code.png" alt="id13" /></p>

<p>关于Mask图案如后面的Table 23所示。</p>

<p>Version Information
再接下来是Version Information（版本7以后需要这个编码），下图中的蓝色部分。</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Version-Information.png" alt="id14" /></p>

<p>Version Information一共是18个bits，其中包括6个bits的版本号以及12个bits的纠错码，下面是一个示例：</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Version-Information-Example.png" alt="id15" /></p>

<p>而其填充位置如下：</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Version-Information-Position.png" alt="id16" /></p>

<h4>数据和数据纠错码</h4>

<p>然后是填接我们的最终编码，最终编码的填充方式如下：从左下角开始沿着红线填我们的各个bits，1是黑色，0是白色。如果遇到了上面的非数据区，则绕开或跳过。</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Data-Placement.png" alt="id17" /></p>

<h4>掩码图案</h4>

<p>这样下来，我们的图就填好了，但是，也许那些点并不均衡，如果出现大面积的空白或黑块，会告诉我们扫描识别的困难。所以，我们还要做Masking操作（靠，还嫌不复杂）QR的Spec中说了，QR有8个Mask你可以使用，如下所示：其中，各个mask的公式在各个图下面。所谓mask，说白了，就是和上面生成的图做XOR操作。Mask只会和数据区进行XOR，不会影响功能区。（注：选择一个合适的Mask也是有算法的）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/masking-pattern.png" alt="id18" /></p>

<p>其Mask的标识码如下所示：（其中的i,j分别对应于上图的x,y）</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Mask-Pattern-Code.png" alt="id19" /></p>

<p>下面是Mask后的一些样子，我们可以看到被某些Mask XOR了的数据变得比较零散了。</p>

<p><img src="http://coolshell.cn//wp-content/uploads/2013/10/Masking-Examples.png" alt="id20" /></p>

<p>Mask过后的二维码就成最终的图了。</p>

<p>好了，大家可以去尝试去写一下QR的编码程序，当然，你可以用网上找个Reed Soloman的纠错算法的库，或是看看别人的源代码是怎么实现这个繁锁的编码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不要让昨天失败的你继续腐蚀今天的自己]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/bu-yao-rang-zuo-tian-shi-bai-de-ni-ji-xu-fu-shi-jin-tian-de-zi-ji/"/>
    <updated>2015-02-13T15:35:24+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/bu-yao-rang-zuo-tian-shi-bai-de-ni-ji-xu-fu-shi-jin-tian-de-zi-ji</id>
    <content type="html"><![CDATA[<p>迷迷糊糊、懵懵懂懂，你走在了二十几岁的人生路口，怀揣着一份不安的心情，独自面对着这个未知的世界。与二十几年前赤裸裸地来到这个世界不同，你无法再用“呜呜呜”的哭声去无意识地博取周围人对你的同情和帮助。而你，显然还未曾开始认识这个真实的社会，就已经被毕业后人潮涌动的趋势推进了社会的大染缸；而你，显然还没做好放下身段，融入集体的准备，更没有收起你的青涩和稚气，武装起铠甲，拿起武器，去跟你的同龄人甚至年长你的人竞争，于是，在进入大染缸后不久又迅速地被挤回到社会的边缘。</p>

<!--more-->


<p>徘徊在边缘的你，有时候会独自一个人守在房间里，失落无助地看着自己房中的一切，眼神中凝聚着对未来的担忧和恐惧：十年以后，二十年以后，这里还是不是还维持原状；有时候你也会独自一人躲在阴暗无人的角落里，歇斯底里地对着老天呐喊着：为什么当初他们跟我一样，而现在却过着我理想中的生活。但是你很清楚，你是一个男孩，你是一个受过高等教育的人，担忧和恐惧是最差的礼物，情绪化并不能给你带来一个美好的明天。更多时候，你会低下头来问自己，为什么会走到今天这一步，是什么造成了今天的局面。你想到了父母，想到了老师，想到了社会的不公，想到了过去不曾努力的自己……</p>

<p>很好，你在潜意识中终于敢说出自己的想法了。</p>

<p>你埋怨你的父母，埋怨你父母在你这一路的成长历程中没有让你充分去接受这个社会的历练，而一门心思埋在学习里；你埋怨你的父母直到现在依然把你当成一个孩子一样，在你该担起责任挑起大梁的时候，却依然束缚着你的成长，还处处絮絮叨叨。但是，我想告诉你，是的，父母确实应该为孩子的成长负起一部分责任，但是也请你换个思维，站在他们的角度想想，我们的大部分的父母在他们青春年少的时候，生活在一个怎样艰苦的环境之中，他们大部分人都没有机会接受高等教育，大半辈子也都只能工作生活在狭窄的人际交往圈里，他们已经很不易了；不幸的是，在经历了文革的摧残之后，被长期禁锢的思想还要面临突如其来的时代观念大转变，他们已经在很努力地改变自己，尝试着用电脑，用触摸屏手机，不至于让时代给抛下，更不愿意让孩子落后于别人；更为现实的是，国家的计划生育政策让他们只能把全部的希望孤注一掷地投到你身上，于是就有了后来不断逼你学习让你考大学的故事，可以说他们也是被社会推着走着，迫不得已。</p>

<p>你埋怨你的老师，埋怨他们填鸭式的应试教育，埋怨他们没有在你走出大学之前告诉你，社会是怎样，你们该怎样。但是，我想告诉你一个看似残酷但又再平常不过的事实：你的老师，不可能会过问你，你想要什么，更不可能教会你，该如何应对未来的社会。兴许，他们根本就不关心你的未来，也不在乎，应试教育对你是有益还是有害，或者你有没有真正学到东西。做好应试教育，是他们的本职工作；学生的考试分数，才是衡量他们工作的重要指标。他们没有必要，去做与你相同的反思。有时候他们可能会想，应试教育会害了学生，但是自己开创素质教育却有可能会让自己丢了饭碗。他们也有很多自己的事情要担心，也想要升职，加薪，他们也有自己的家庭、子女要供养。他们不可能站在另外一个高度用一套全新的模式去凌驾于整个中国的教育体制之上，即便他们有这个能力。而大学里的老师，更不可能告诉你这些，因为他们很有可能终其一生，都没有真正在社会上找过一份工作，没有真正面对过外面企业激烈的市场竞争，更谈不上可以给你勾勒出一条未来在社会上的康庄大道。他们也是情非得已。</p>

<p>你埋怨过去不曾努力的自己，埋怨自己为什么到现在依然一事无成。我想告诉你，比起一般人，你已经很努力了。但是，在这个世界上，并不是只要努力就可以改变一切现状，成才更不是一朝一夕就可以完成的过程。</p>

<p>你喜欢看书，你喜欢研究一切逻辑推理与一切非逻辑创意的事物，可是真正让你可以自由阅读的大学时光，你却连仅有的几本课外书都没有读完，因为你周围的人都没有阅读的习惯……你恐惧未来，于是你不断地寻找着跟这个真实的社会近距离接触的机会，在大学里你加入了很多组织，工作以后你试图融入更多的人群，寻找着可以在这个社会上安身立命的位置而不至于被抛弃。可是，每一次，你总在喧嚣的人群中听到自己内心无声地呐喊，你不愿意让灵魂流溢于那空虚的酒杯当中，在每一次艰难地咽下最后一口酒之后回来，你总是会情不自禁地想起郑智化《水手》中所唱的“只有远离人群才能找回我自己，在带着咸味的空气中自由地呼吸。”你总是期望太高，根基太浅，欲望太大，努力太少。二十多岁的年纪，你几乎想要将自己的棱角触及到整个世界，却不知，路，是要一步一步走出来的。你觊觎别人所取得的成就，以为那样的成果自己只需努力就唾手可得，却不知，每一个成就的背后，都不仅仅是“努力”一个因素的组成，而是多个变量因素自由组合的复杂结果。于是，你一次次地吹响着前进的号角，却在离自己不远的地方一次次地倒下。终其原因，并不是你没有努力过，而是你没有好好努力地找回你自己，定位你自己。</p>

<p>我告诉你这一切，并不是在撇清父母，老师的责任，也不是将责任归罪于时代，更不是认可你可以甩开一切不用检讨。而是让你明白，你的过去已经造成，你的未来你得负责。历史是否重演取决于你当下是否做出改变。</p>

<p>你不满意父母对你的唠叨，对你多加限制，你应该尝试着跟他们沟通，耐心地沟通。因为你还是一个业务，沟通和交流是你必须要做而且一定要做好的事，不管是对客户还是对谁。一次不行就两次，耐心点。如果还是不行，就拿出行动去证明，你可以担起重任，挑起大梁。而不是还用一种对抗的口吻和埋怨的心态在折磨自己也折磨着亲人。</p>

<p>你不满意你老师的应试教育，很庆幸，你已经彻底摆脱了应试教育。但是还有公司和领导布置的很多重复的枯燥的乏味的工作，以及业务考试。你应该尝试着在枯燥的工作中寻找到乐趣，在无数次的重复中寻找提高效率的方法，在每一天的工作中体验挖掘出创意，发挥在你的兴趣爱好之中。而不是像过去应试教育被动地等待着老师布置作业一样，被动地等着领导布置任务，再一次陷入另类的“应试教育”模式当中。</p>

<p>你不满意你的过去与现在，那正是我要对你讲的，你的过去命中注定，不可返回。不要让昨天失败的你继续腐蚀今天的自己。你要做的，
本部分内容设定了隐藏，需要回复后才能看到
接着，聆听自己内心的声音，听听自己到底想要什么，自己的潜在优势又在哪里，自己眼前的困难和危机又有哪些，在纷乱繁杂的世界当中找到自己的位置。然后，背上行囊，开始人生的另外一段旅程。</p>

<p>值得高兴的是，你已经学会了独立思考，你已经勇于去面对人生的困难并将其视作旅途的历练，你还拥有一副健康的身躯，和一个聪明的大脑，这已经足够了。</p>

<p>原谅过去，珍惜当下，拥抱未来。2013已经快接近尾声了，愿你已经走在人生尝试的道路上……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS程序的Build过程]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ioscheng-xu-de-buildguo-cheng/"/>
    <updated>2015-02-13T15:07:52+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ioscheng-xu-de-buildguo-cheng</id>
    <content type="html"><![CDATA[<p>本文将轻度解密Xcode build日志，还原iOS程序build的过程。
另外将介绍如何对build过程的控制，进而定制出自己希望的流程，
例如通过Build phase的定制，给app icon打水印(包括版本号和日期)。
通过对工程文件的解读，为你揭开工程文件(.pbxproj)与
build settings的关系。这对于解决工程文件的merge冲突非常有帮助。
PS：实际上各开发平台的build过程都比较相似，如果你熟悉了
某个平台的build过程，那么同样的原理也适用于别的平台。
可以说换汤不换药，本质是一样的。</p>

<!--more-->


<h4>本文目录如下所示：</h4>

<ul>
<li>解密Build日志</li>
<li>Build过程的控制</li>
<li>工程文件</li>
<li>小结</li>
</ul>


<p>当我们进行开发时，如果需要运行程序，只要在Xcode中点击运行按钮(这个按钮看起来有点像在播放音乐)，过一会，我们的程序就会运行在设备或者模拟器上了，看似简单的操作过程，不过在这背后隐藏了许多步骤！当然，有时候也会遇到一些错误。</p>

<p>本文，我将从稍微高一点的角度来解读整个Build过程，并探索一下Build过程与Xcode界面上显示的project setting有多大关系。当然，为了更加深入的了解每一步实际执行的任务，我会适当的引入一些别的文章。</p>

<h4>解密Build日志</h4>

<p>为了了解Xcode build过程的内部工作原理，我们首先把突破点放在完整的log文件上。打开Log Navigator，从列表中选择一个Build，Xcode就会通过很漂亮的一种格式将log文件显示出来。如下图所示：</p>

<p><img src="http://beyondvincent.com/images/2013/11/41.png" alt="id1" /></p>

<p>默认情况下，XCode会把大量的log信息隐藏起来，你只需要点击选中某条log，然后点击右边的展开按钮，就能看到该条log的详细信息了。当然，你也可以选中一条或者多条日志，然后通过Cmd+C，就能将相关的所有文本信息拷贝到粘贴板上。另外，还可以通过菜单Editor中的Copy transcript for shown results将所有的log信息复制到粘贴板上。</p>

<p>在我这儿的示例中，将近有10000行log信息(当然，大多数信息是由OpenSSL带来的，并非来自我们的代码)。下面我们就开始吧！</p>

<p>首先，你可能会发现输出的log信息，被工程中对应的target分割开了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Build target Pods-SSZipArchive
</span><span class='line'>...
</span><span class='line'>Build target Makefile-openssl
</span><span class='line'>...
</span><span class='line'>Build target Pods-AFNetworking
</span><span class='line'>...
</span><span class='line'>Build target crypto
</span><span class='line'>...
</span><span class='line'>Build target Pods
</span><span class='line'>...
</span><span class='line'>Build target ssl
</span><span class='line'>...
</span><span class='line'>Build target objcio</span></code></pre></td></tr></table></div></figure>


<p>在我这的工程中有好几个依赖项：如包含在Pods中的AFNetworking 和 SSZipArchive, 已经以子工程形式存在的OpenSSL等。</p>

<p>针对这里的每个target，Xcode都会执行一些列的操作，以将相关的源代码转换为机器可读的二进制(于所选平台相关)。我们来亲密接触一下第一个targetSSZipArchive吧。</p>

<p>在这个target的log输出中，我们可以看到每个任务执行的详细情况。例如，第一个是处理一个预编译头文件(为了增加其可读性，我省略了许多细节)：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(1) ProcessPCH /.../Pods-SSZipArchive-prefix.pch.pch Pods-SSZipArchive-prefix.pch normal armv7 objective-c com.apple.compilers.llvm.clang.1_0.compiler
</span><span class='line'>    (2) cd /.../Dev/objcio/Pods
</span><span class='line'>        setenv LANG en_US.US-ASCII
</span><span class='line'>        setenv PATH "..."
</span><span class='line'>    (3) /.../Xcode.app/.../clang 
</span><span class='line'>            (4) -x objective-c-header 
</span><span class='line'>            (5) -arch armv7 
</span><span class='line'>            ... configuration and warning flags ...
</span><span class='line'>            (6) -DDEBUG=1 -DCOCOAPODS=1 
</span><span class='line'>            ... include paths and more ...
</span><span class='line'>            (7) -c 
</span><span class='line'>            (8) /.../Pods-SSZipArchive-prefix.pch 
</span><span class='line'>            (9) -o /.../Pods-SSZipArchive-prefix.pch.pch</span></code></pre></td></tr></table></div></figure>


<p>在build过程中，每个任务都会出现类似上面的这些log信息，我们就通过上面的log信息了解详情吧。
每个log都会以这样的一行来对任务进行描述。</p>

<p>接着下面带缩进的这3行会被输出。此处，修改了工作路径，并对PANG和PATH环境变量进行设置。
这里才是真正焕发出魔力的地方。为了处理一个.pch文件，调用了clang，并且附带了大量的选项。这行log信息显示出了所有的调用参数，我们稍微看几个参数吧：</p>

<p>-x标示符用来指定语言，此时是objective-c-header。</p>

<p>目标架构指定为armv7。</p>

<p>标示#defines的内容已经被添加了。</p>

<p>-c标示符用来告诉clang具体如何运行。-c意味着：运行预处理器、词法分析、类型检查LLVM的生成和优化，以及特定target相关汇编代码的生成阶段，最后，运行这个汇编代码以生成.o目标文件。</p>

<p>输入文件。</p>

<p>输出文件。</p>

<p>虽然有大量的log信息，不过我不会把每个log信息都做详解。我们的目的是让你了解在build过程中，完整的了解什么工具被调用，以及都使用了什么参数。</p>

<p>针对这个target，虽然只有一个.pch文件，但实际上这里对objective-c-header文件处理了两次。下面来看看log信息告诉我们的详细情况：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ProcessPCH /.../Pods-SSZipArchive-prefix.pch.pch Pods-SSZipArchive-prefix.pch normal armv7 objective-c ...
</span><span class='line'>ProcessPCH /.../Pods-SSZipArchive-prefix.pch.pch Pods-SSZipArchive-prefix.pch normal armv7s objective-c ...</span></code></pre></td></tr></table></div></figure>


<p>可以看到，build了两种target：armv7和armv7s，所以clang为每种架构处理了一次这个文件。
紧接着预编译头文件的处理之后，我们可以找到SSZipArchive target相关的其它一些任务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CompileC ...
</span><span class='line'>Libtool ...
</span><span class='line'>CreateUniversalBinary ...</span></code></pre></td></tr></table></div></figure>


<p>通过名称，我们基本能够知道个大概：CompileC用来编译.m和.c文件，Libtool根据目标文件创建出一个库，而CreateUniversalBinary则将上一阶段产生的两个.a文件(对应着两个不同的架构)合并为一个通用的二进制文件(可以运行在armv7和armv7s上)。</p>

<p>上面这些类似的步骤会出现在工程中所有其它的依赖项中。</p>

<p>当所有的依赖项都准备好了，就可以开始构建我们程序的target了。针对该target输出的log信息包含了之前没有出现过的内容，这些内容非常有价值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PhaseScriptExecution ...
</span><span class='line'>DataModelVersionCompile ...
</span><span class='line'>Ld ...
</span><span class='line'>GenerateDSYMFile ...
</span><span class='line'>CopyStringsFile ...
</span><span class='line'>CpResource ...
</span><span class='line'>CopyPNGFile ...
</span><span class='line'>CompileAssetCatalog ...
</span><span class='line'>ProcessInfoPlistFile ...
</span><span class='line'>ProcessProductPackaging /.../some-hash.mobileprovision ...
</span><span class='line'>ProcessProductPackaging objcio/objcio.entitlements ...
</span><span class='line'>CodeSign ...</span></code></pre></td></tr></table></div></figure>


<p>在上面的任务中，可能Ld不能一眼看出是什么意思，此处它是一个linker工具，跟libtool类似。实际上libtool会简单的调用ld和lipo。而ld用来构建可执行文件。更多编译和链接相关的文章可以看看 Daniel 和 Chris写的。</p>

<p>上面这些步骤，实际上都会调用相关的命令行工具来做实际的工作，这跟之前我们看的步骤ProcessPCH类似。至此，我将不会继续介绍这些log信息了，我将带来大家从另外一个不同的角度来继续探索这些任务：Xcode是如何知道哪些任务需要被执行？</p>

<h4>Build过程的控制</h4>

<p>当你选中在Xcode 5中的一个工程时，project editor会在顶部显示出6个tabs：General, Capabilities, Info, Build Settings, Build Phases 以及 Build Rules。如下图所示：</p>

<p><img src="http://beyondvincent.com/images/2013/11/42.png" alt="id2" /></p>

<p>其中最后3项与build过程的相关度最大。</p>

<h6>Build Phases</h6>

<p>Build Phases代表着将代码构建为一个可执行文件的规则。它描述了build过程中必须执行的不同任务。</p>

<p><img src="http://beyondvincent.com/images/2013/11/43.png" alt="id3" /></p>

<p>首先，指定了target的依赖项。这将告诉build系统在当前target可以build之前，必须先build target的依赖项。实际上这并不属于真正的build phase，在这里，Xcode只不过将其与build phase显示到一块罢了。</p>

<p>接着是一个CocoaPods相关的脚本需要在build phase执行——更多CocoaPods相关信息可以查看Michele的文章。</p>

<p>然后在Compile Sources中指定了所有必须进行编译的文件。更多相关内容我们将在build rules和build settings中研究。在Compile Sources中指定的文件将根据这些rule和setting被处理。</p>

<p>当编译结束，下一步就是将所有的内容链接到一块：Link Binary with Libraries。在这里面列出了所有的静态库和动态库，这些库会与上面编译阶段生成的目标文件进行链接。实际上静态库和动态库的处理过程有非常大的区别，相关内容可以参考Daniel的文章 Mach-O executables。</p>

<p>当链接完成之后，build phase中最后需要处理的就是将静态资源（例如图片和字体）拷贝到app bundle中。需要注意的是，如果图片资源是PNG格式，那么不仅仅对其进行拷贝，还会做一些优化(如果build settings中的PNG优化是打开的)。</p>

<p>虽然静态资源的拷贝是build phase中的最后一步，但这并不代表build过程已经完成了。例如，还没有进行code signing(这并不是build phase考虑的范畴)，code signing属于build步骤中的最后一步Packaging。</p>

<h6>定制Build Phases</h6>

<p>至此，你已经完全可以掌控build phases相关内容(先不考虑默认的设置项)，例如，你可以在build phases中添加运行自定义脚本，就像CocoaPods使用的一样，来做额外的工作。当然也可以添加一些资源的拷贝任务，当你需要将某些确定的资源拷贝到制定的target目录中，这非常有用。</p>

<p>另外你可以通过定制build phase来添加带有水印(包括版本号和commit hash)的app icon。只需要在build phase中添加一个Run Script，然后用下面的命令来获取版本号和commit hash：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version=`/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${INFOPLIST_FILE}"`
</span><span class='line'>commit=`git rev-parse --short HEAD`</span></code></pre></td></tr></table></div></figure>


<p>然后可以使用ImageMagick来修改app icon。这里有一个完整的示例，可以参考。</p>

<p>如果你希望编写的代码比较简洁点，那么可以添加一个Run Script，如果一个源文件超过指定行数，就发出警告。如下代码所示，设置的行数为200。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find "${SRCROOT}" \( -name "*.h" -or -name "*.m" \) -print0 | xargs -0 wc -l | awk '$1 &gt; 200 && $2 != "total" { print $2 ":1: warning: file more than 200 lines" }'</span></code></pre></td></tr></table></div></figure>


<h6>Build Rules</h6>

<p>Build rules指定了不同文件类型该如何编译。一般来说，开发者并不需要修改这里面的内容。如果你需要对特定的文件类型添加处理方法，那么可以在此处天剑一条新的规则。</p>

<p>一条build rule指定了其应用于那种文件类型，该文件类型是如何被处理的，以及输出内容被放置到何处。比方说，我们创建了一条预处理规则，该规则将Objective-C的实现文件当做输入，然后解析文件内部的注释内容，最后再输出一个.m文件，文件中包含了生成的代码。由于我们不能将.m文件既当做输入又当做输出，所以我使用了.mal后缀，定制的build rule如下所示：</p>

<p><img src="http://beyondvincent.com/images/2013/11/44.png" alt="id4" /></p>

<p>上面的规则应用于所有后缀为*.mal的文件，这些文件会被自定义的脚本处理(调用我们的预处理器，并附带上输入和输出参数)。最后，该规则告诉build system在哪里可以找到此规则的输出文件。</p>

<p>由于这里的输出是一个.m文件，那么build使这些.m文件会被编译处理(就如刚开始介绍的那些预处理步骤)。
在脚本中，我使用了少量的变量来指定正确的路径和文件名。在苹果的Build Setting Reference.文档中可以找到所有可用的变量。build过程中，要想观察所有已存在的环境变量，你可以添加一个Run Script build phase，并勾选上Show environment variables in build log。</p>

<h6>Build Settings</h6>

<p>至此，我们已经了解到build phases是如何被用来定义build 过程的步骤，以及build rules是如何指定哪些文件类型在编译阶段需要被预处理。在build settings中，我们可以配置每个任务(之前在build log输出中看到的任务)的详细内容。</p>

<p>在这里，你会发现build 过程的每一个阶段，都有许多选项：从编译、链接一直到code signing和packaging。注意，settings被分割为不同的部分，大部分会于build phases有关联，有时候也会指定编译的文件类型。</p>

<p>这些选项基本都有不错的文档介绍，你可以在右边面板中的quick help inspector或者 Build Setting Reference中查看到。</p>

<h6>工程文件</h6>

<p>上面我们介绍的所有内容都被保存在工程文件(.pbxproj)中，除了其它一些工程相关信息(例如file groups)，我们很少会深入该文件内部，除非在代码merge时发生冲突，或许会进去看看。
我建议你用文本编辑器打开一个工程文件，从头到尾的看一遍里面的内容。它的可读性非常高，里面的许多内容一看就知道什么意思了，不会存在太大的问题。通过阅读并完全理解工程文件，这对于合并工程文件的冲突非常有帮助。</p>

<p>首先，我们来看看文件中叫做rootObject的entry。在我的工程中，如下所示：</p>

<pre><code>rootObject = 1793817C17A9421F0078255E /* Project object */;
</code></pre>

<p>根据这个ID(1793817C17A9421F0078255E)，我们可以找到main工程的定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* Begin PBXProject section */
</span><span class='line'>    1793817C17A9421F0078255E /* Project object */ = {
</span><span class='line'>        isa = PBXProject;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>在这部分section中包含了一些keys，顺从这些key，我们可以了解到更多关于这个工程文件的组成。例如，mainGroup指向了root file group。如果你按照这个思路，你可以快速了解到在.pbxproj文件中工程的结构。下面我要来介绍一些与build过程相关的内容。其中target key指向了build target的定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>targets = (
</span><span class='line'>    1793818317A9421F0078255E /* objcio */,
</span><span class='line'>    170E83CE17ABF256006E716E /* objcio Tests */,
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>根据第一个id，我们找到一个target的定义：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1793818317A9421F0078255E /* objcio */ = {
</span><span class='line'>    isa = PBXNativeTarget;
</span><span class='line'>    buildConfigurationList = 179381B617A9421F0078255E /* Build configuration list for PBXNativeTarget "objcio" */;
</span><span class='line'>    buildPhases = (
</span><span class='line'>        F3EB8576A1C24900A8F9CBB6 /* Check Pods Manifest.lock */,
</span><span class='line'>        1793818017A9421F0078255E /* Sources */,
</span><span class='line'>        1793818117A9421F0078255E /* Frameworks */,
</span><span class='line'>        1793818217A9421F0078255E /* Resources */,
</span><span class='line'>        FF25BB7F4B7D4F87AC7A4265 /* Copy Pods Resources */,
</span><span class='line'>    );
</span><span class='line'>    buildRules = (
</span><span class='line'>    );
</span><span class='line'>    dependencies = (
</span><span class='line'>        1769BED917CA8239008B6F5D /* PBXTargetDependency */,
</span><span class='line'>        1769BED717CA8236008B6F5D /* PBXTargetDependency */,
</span><span class='line'>    );
</span><span class='line'>    name = objcio;
</span><span class='line'>    productName = objcio;
</span><span class='line'>    productReference = 1793818417A9421F0078255E /* objcio.app */;
</span><span class='line'>    productType = "com.apple.product-type.application";
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>其中buildConfigurationList指向了可用的配置项，一般包括Debug和Release。根据debug对应的id，我们可以找到build setting tab中所有选项存储的位置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>179381B717A9421F0078255E /* Debug */ = {
</span><span class='line'>    isa = XCBuildConfiguration;
</span><span class='line'>    baseConfigurationReference = 05D234D6F5E146E9937E8997 /* Pods.xcconfig */;
</span><span class='line'>    buildSettings = {
</span><span class='line'>        ALWAYS_SEARCH_USER_PATHS = YES;
</span><span class='line'>        ASSETCATALOG_COMPILER_LAUNCHIMAGE_NAME = LaunchImage;
</span><span class='line'>        CODE_SIGN_ENTITLEMENTS = objcio/objcio.entitlements;
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>而buildPhases属性则简单的列出了在Xcode中定义的所有build phases。这非常容易识别出来(Xcode中的参数使用了它们原本真正的名字，并以C风格进行注释)。</p>

<p>buildRules属性是空的：因为在该工程中，我没有自定义build rules。</p>

<p>dependencies列出了在Xcode build phase tab中列出的target依赖项。</p>

<p>没那么吓人，不是吗？工程中剩下的内容就留给你去当做练习来了解吧。只需要顺着ID走，即可，一旦你找到了敲门，理解了Xcode中工程设置的不同section，那么对于merge工程文件的冲突时，将变得非常简单。甚至可以在GitHub中就能阅读工程文件，而不用将工程文件clone到本地，并用Xcode打开。</p>

<h4>小结</h4>

<p>当今的软件是都用其它复杂的一些软件和资源开发出来的，例如library和build工具等。反过来，这些工具是构建于底层架构的，这犹如剥洋葱一样，一层包着一层。虽然这样一层一层的，给人感觉太复杂，但是你完全可以去深入了解它们，这非常有助于你对软件的深入理解，实际上当你了解之后，这并没有想象中的那么神奇，只不过它是一层一层堆砌起来的，每一层都是基于下一层构建起来的。</p>

<p>在这里，我们只是轻微的探究了一下build过程，当我们点击Xcode中的允许按钮时，并没必要深入了解内部具体发生了什么。只需要了解到build的过程，以及可控的一些操作顺序即可。当然，要想进一步深入了解，可以试着阅读其它一些文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中消息的传递机制]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ioszhong-xiao-xi-de-chuan-di-ji-zhi/"/>
    <updated>2015-02-13T14:43:49+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ioszhong-xiao-xi-de-chuan-di-ji-zhi</id>
    <content type="html"><![CDATA[<p>每个应用程序或多或少，都由一些松耦合的对象构成，这些对象彼此之间要想很好的完成任务，就需要进行消息传递。本文将介绍所有可用的消息传递机制，并通过示例来介绍这些机制在苹果的Framework中如何使用，同时，还介绍了一些最佳实践建议，告诉你什么时机该选择使用什么机制。</p>

<!--more-->


<h4>目录</h4>

<p><a href="#01">  可用的机制     </a></p>

<p><a href="#02">  做出正确的选择   </a></p>

<p><a href="#03">  Framework示例 </a></p>

<p><a href="#04">  小结              </a></p>

<p>虽然这一期的主题是关于Foundation Framework的，不过本文中还介绍了一些超出Foundation Framework(KVO和Notification)范围的一些消息传递机制，另外还介绍了delegation，block和target-action。</p>

<p>大多数情况下，消息传递该使用什么机制，是很明确的了，当然了，在某些情况下该使用什么机制并没有明确的答案，需要你亲自去尝试一下。</p>

<p>本文中，会经常提及接收者[recipient]和发送者[sender]。在消息传递机制中具体是什么意思，我们可以通过一个示例来解释：一个table view是发送者，而它的delegate就是接收者。Core Data managed object context是notification的发送者，而获取这些notification的主体则是接收者。一个滑块(slider)是action消息的发送者，而在代码里面对应着实现这个action的responder就是接收者。对象中的某个属性支持KVO，那么谁修改这个值，谁就是发送者，对应的观察者(observer)则是接收者。</p>

<p><a name="可用的机制" id="01"></a></p>

<h4>可用的机制</h4>

<p>首先我们来看看每种机制的具体特点。在下一节中，我会结合一个流程图来介绍如何在具体情况下，选择正确的消息传递机制。最后，将介绍一些来自苹果Framework中的示例，并会解释在某种确定情况下为什么要选择固定的机制。</p>

<h5>KVO</h5>

<p>KVO提供了这样一种机制：当对象中的某个属性值发生了改变，可以对这些值的观察者做出通知。KVO的实现包含在Foundation里面，基于Foundation构建的许多Framework对KVO都有所依赖。要想了解更多关于如何使用KVO，可以阅读本期由Daniel写的的KVO和KVC文章。</p>

<p>如果对某个对象中值的改变情况感兴趣，那么可以使用KVO消息传递机制。这里有两个要求，首先，接收者(会接收到值发生改变的消息)必须知道发送者(值将发生改变的那个对象)。另外，接收者同样还需要知道发送者的生命周期，因为在销毁发送者对象之前，需要取消观察者的注册。如果这两个要求都满足了，消息传递过程中可以是1对多(多个观察者可以注册某个对象中的值)。</p>

<p>如果计划在Core Data对象上使用KVO，需要知道这跟一般的KVO使用方法有点不同。那就是必须结合Core Data的故障机制(faulting mechanism)，一旦core data出现了故障，它将会触发其属性对应的观察者(即使这些属性值没有发生改变)。</p>

<h5>Notification</h5>

<p>在不相关的两部分代码中要想进行消息传递，通知(notifacation)是非常好的一种机制，它可以对消息进行广播。特别是想要传递丰富的信息，并且不一定指望有谁对此消息关心。</p>

<p>通知可以用来发送任意的消息，甚至包含一个userInfo字典，或者是NSNotifacation的一个子类。通知的独特之处就在于发送者和接收者双方并不需要相互知道。这样就可以在非常松耦合的模块间进行消息的传递。记住，这种消息传递机制是单向的，作为接收者是不可以回复消息的。</p>

<h5>delegation</h5>

<p>在苹果的Framework中，delegation模式被广泛的只用着。delegation允许我们定制某个对象的行为，并且可以收到某些确定的事件。为了使用delegation模式，消息的发送者需要知道消息的接收者(delegate)，反过来就不用了。这里的发送者和接收者是比较松耦合的，因为发送者只知道它的delegate是遵循某个特定的协议。
delegate协议可以定义任意的方法，因此你可以准确的定义出你所需要的类型。你可以用函数参数的形式来处理消息内容，delegate还可以通过返回值的形式给发送者做出回应。如果只需要在相对接近的两个模块之间进行消息传递，那么Delegation是一种非常灵活和直接方式。</p>

<p>不过，过渡使用delegation也有一定的风险，如果两个对象的耦合程度比较紧密，相互之间不能独立存在，那么此时就没有必要使用delegate协议了，针对这种情况，对象之间可以知道相互间的类型，进而直接进行消息传递。例如UICollectionViewLayout和NSURLSessionConfiguration。</p>

<h5>block</h5>

<p>Block相对来说，是一种比较新的技术，它首次出现是在OS X 10.6和iOS 4中。一般情况下，block可以满足用delegation实现的消息传递机制。不过这两种机制都有各自的需求和优势。
当不考虑使用block时，一般主要是考虑到block极易引起retain环。如果发送者需要reatain block，而又不能确保这个引用什么时候被nil，这样就会发生潜在的retain环。
假设我们想要实现一个table view，使用block替代delegate，来当做selection的回调，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.myTableView.selectionHandler = ^void(NSIndexPath *selectedIndexPath) {
</span><span class='line'>    // handle selection ...
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>上面代码的问题在于self retain了table view，而table view为了之后能够使用block，进而 retain了block。而table view又不能把这个引用nil掉，因为它不知道什么时候不在需要这个block了。如果我们保证不了可以打破这个retain环，而我们又需要retain发送者，此时block不是好的选择。
NSOperation就可以很好的使用block，因为它能再某个时机打破retain环：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.queue = [[NSOperationQueue alloc] init];
</span><span class='line'>MyOperation *operation = [[MyOperation alloc] init];
</span><span class='line'>operation.completionBlock = ^{
</span><span class='line'>    [self finishedOperation];
</span><span class='line'>};
</span><span class='line'>[self.queue addOperation:operation];</span></code></pre></td></tr></table></div></figure>


<p>乍一看这似乎是一个retain环：self retain了queue，queue retain了operation，而operation retain了completion block，而completion blockretain了self。不过，在这里，将operation添加到queue时，会使operation在某个时机被执行，然后从queue中remove掉（如果没有被执行，就会有大问题了）。一单queue移除了operation之后，retain环就被打破了。</p>

<p>再来一个示例：这里实现了一个视频编码器的类，里面有一个名为encodeWithCompletionHandler:的方法。为了避免出现retain环，我们需要确保编码器这个对象能够在某个时机nil掉其对block的引用。其内部代码如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface Encoder ()
</span><span class='line'>@property (nonatomic, copy) void (^completionHandler)();
</span><span class='line'>@end
</span><span class='line'>@implementation Encoder
</span><span class='line'>- (void)encodeWithCompletionHandler:(void (^)())handler
</span><span class='line'>{
</span><span class='line'>    self.completionHandler = handler;
</span><span class='line'>    // do the asynchronous processing...
</span><span class='line'>}
</span><span class='line'>// This one will be called once the job is done
</span><span class='line'>- (void)finishedEncoding
</span><span class='line'>{
</span><span class='line'>    self.completionHandler();
</span><span class='line'>    self.completionHandler = nil; // &lt;- Don't forget this!
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，一旦编码任务完成，就会调用complietion block，进而把引用nil掉。
如果我们发送的消息属于一次性的(具体到某个方法的调用)，由于这样可以打破潜在的retain环，那么使用block是非常不错的选择。另外，如果为了让代码可读性更强，更有连贯性，那最好是使用block了。根据这个思路，block经常可以用于completion handler、error handler等。</p>

<h5>Target-Action</h5>

<p>Target-Action主要被用于响应用户界面事件时所需要传递的消息中。iOS中的UIControl和Mac中的NSControl/NSCell都支持这种机制。Target-Action在消息的发送者和接收者之间建立了一个非常松散耦合。消息的接收者不知道发送者，甚至消息的发送者不需要预先知道消息的接收者。如果target是nil，action会在响应链(responder chain)中被传递，知道找到某个能够响应该aciton的对象。在iOS中，每个控件都能关联多个target-action。</p>

<p>基于target-action消息传递的机制有一个局限就是发送的消息不能携带自定义的payload。在Mac的action方法中，接收者总是被放在第一个参数中。而在iOS中，可以选择性的将发送者和和触发action的事件作为参数。除此之外，没有别的办法可以对发送action消息内容做控制。</p>

<p><a name="做出正确的选择" id="02"></a></p>

<h4>做出正确的选择</h4>

<p>根据上面讨论的结果，这里我画了一个流程图，来帮助我们何时使用什么消息传递机制做出更好的决定。忠告：流程图中的建议并非最终的答案；可能还有别的选项依然能实现目的。只不过大多数情况下此图可以引导你做出正确的决定。</p>

<p><img src="http://beyondvincent.com/images/2013/12/2.png" alt="id1" /></p>

<p>上图中，还有一些细节需要做更近一步的解释：</p>

<p>上图中的有个盒子这样说到：sender is KVO compliant(发送者支持compliant)。这不仅以意味着当值发生改变时，发送者会发送KVO通知，并且观察者还需要知道发送者的生命周期。如果发送者被存储在一个weak属性中，那么发送者有可能被nil掉，进而引起观察者发生leak。</p>

<p>另外底部的一个盒子说到：message is direct response to method call(消息直接在方法的调用代码中响应)。也就是说处理消息的代码跟方法的调用代码处于相同的地方。</p>

<p>最后，在左下角，处于一个决策问题的判断状态：sender can guarantee to nil out reference to block?(发送者能够确保nil掉到block的引用吗？)，这实际上涉及到之前我们讨论到基于block 的APIs已经潜在的retain环。使用block时，如果发送者不能保证在某个实际能够把对block的引用nil掉，那么将会遇到retain环的问题。</p>

<p><a name="Framework示例" id="03"></a></p>

<h4>Framework示例</h4>

<p>本节我们通过一些来自苹果Framework的示例，来看看在实际使用某种机制之前，苹果是处于何种原因做出选择的。</p>

<h5>KVO</h5>

<p>NSOperationQueue就是lion给了KVO来观察队列中operation状态属性的改变情况(isFinished, isExecuting, isCancelled)。当状态发生了改变，队列会受到一个KVO通知。为什么operationqueue要是用KVO呢？</p>

<p>消息的接收者(operation queue)明确的知道发送者(opertation)，以及通过retain来控制operation的生命周期。另外，在这种情况下，只需要单向的消息传递机制。当然，如果这样考虑：如果operation queue只关心operation值的改变情况，可能还不足以说服大家使用KVO。但是我们至少可以这样理解：什么机制可以对值的改变进行消息传递呢。</p>

<p><img src="http://beyondvincent.com/images/2013/12/3.png" alt="id2" /></p>

<p>当然KVO也不是唯一的选择。我们可以这样设计：operation queue作为operation的delegate，operation会调用类似operationDidFinish: 或 operationDidBeginExecuting: 这样的方法，来将它的state传递给queue。这样一来，就不太方便了，因为operation需要将其state属性保存下来，一遍调用这些delegate方法。另外，由于queue不能主动获取state信息，所以queue也必须保存着所有operation的state。</p>

<h5>Notifications</h5>

<p>Core Data使用notification来传递事件(例如一个managed object context内部的改变——NSManagedObjectContextDidChangeNotification)。</p>

<p>change notification是由managed object context发出的，所以我们不能确定消息的接收者一定知道发送者。如果消息并不是一个UI事件，而有可能多个接收者对该消息感兴趣，并且消息的传递属于单向(one-way communication channel)，那么notification是最佳选择。</p>

<p><img src="http://beyondvincent.com/images/2013/12/4.png" alt="id3" /></p>

<h5>Delegation</h5>

<p>Table view的delegate有多种功能，从accessory view的管理，到屏幕中cell显示的跟踪，都与delegate的功劳。例如，我们来看看 tableView:didSelectRowAtIndexPath: 方法。为什么要以delegate调用的方式来实现？而又为啥不用target-action方式？</p>

<p>正如我们在流程图中看到的一样，使用target-action时，不能传递自定义的数据。而在选中table view的某个cell时，collection view不仅仅需要告诉我们有一个cell被选中了，还需要告诉我们是哪个cell被选中了(index path)。按照这样的一种思路，那么从流程图中可以看到应该使用delegation机制。</p>

<p><img src="http://beyondvincent.com/images/2013/12/5.png" alt="id4" /></p>

<p>如果消息传递中，不包含选中cell的index path，而是每当选中项改变时，我们主动去table view中获取到选中cell的相关信息，会怎样呢？其实这会非常的麻烦，因为这样一来，我们就必须记住当前选中项相关数据，以便获知被选中的cell。</p>

<p>同理，虽然我们也可以通过观察table view中选中项的index paths属性值，当该值发生改变时，获得一个选中项改变的通知。不过，我们会遇到与上面同样的问题：不做任何记录的话，我们如何获知被选中项的相关信息。</p>

<h5>Blocks</h5>

<p>关于block的介绍，我们来看看[NSURLSession dataTaskWithURL:completionHandler:]吧。从URL loading system返回到调用者，这个过程具体是如何传递消息的呢？首先，作为这个API的调用者，我们知道消息的发送者，但是我们并没有retain这个发送者。另外，这属于单向消息传递——直接调用dataTaskWithURL:方法。如果按照这样的思路对照着流程图，我们会发现应该使用基于block消息传递的机制。</p>

<p><img src="http://beyondvincent.com/images/2013/12/6.png" alt="id5" /></p>

<p>还有其它可选的机制吗？当然有了，苹果自己的NSURLConnection就是最好的例子。NSURLConnection在block问世之前就已经存在了，所以它并没有利用block进行消息传递，而是使用delegation机制。当block出现之后，苹果在NSURLConnection中添加了sendAsynchronousRequest:queue:completionHandler:方法(OSX 10.7 iOS 5)，因此如果是简单的task，就不必在使用delegate了。</p>

<p>在OS X 10.9 和 iOS 7中，苹果引入了一个非常modern的API：NSURLSession，其中使用block当做消息传递机制(NSURLSession仍然有一个delegate，不过是用于别的目的)。</p>

<h5>Target-Action</h5>

<p>Target-Action用的最明显的一个地方就是button(按钮)。button除了需要发送一个click事件以外，并不需要再发送别的信息了。所以Target-Action在用户界面事件传递过程中，是最佳的选择。</p>

<p><img src="http://beyondvincent.com/images/2013/12/7.png" alt="id6" /></p>

<p>如果taget已经明确指定了，那么action消息回直接发送给指定的对象。如果taget是nil，action消息会以冒泡的方式在响应链中查找一个能够处理该消息的对象。此时，我们拥有一种完全解耦的消息传递机制——发送者不需要知道接收者，以及其它一些信息。</p>

<p>Target-Action非常适用于用户界面中的事件。目前也没有其它合适的消息传递机制能够提供同样的功能。虽然notification最接近这种在发送者和接收者解耦关系，但是target-action可以用于响应链(responder chain)——只有一个对象获得action并作出响应，并且action可以在响应链中传递，直到遇到能够响应该action的对象。</p>

<p><a name="小结" id="04"></a></p>

<h4>小结</h4>

<p>首次接触这些机制，感觉它们都能用于两个对象间的消息传递。但是仔细琢磨一番，会发现它们各自有其需求和功能。</p>

<p>文中给出的决策流程图可以为我们选择使用何种机制提供参考，不过图中给出的方案并不是最终答案，好多地方还需要亲自去实践。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac系统终端命令行设置自动关机/重启/睡眠]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/macxi-tong-zhong-duan-ming-ling-xing-she-zhi-zi-dong-guan-ji-slash-zhong-qi-slash-shui-mian/"/>
    <updated>2015-02-13T14:33:03+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/macxi-tong-zhong-duan-ming-ling-xing-she-zhi-zi-dong-guan-ji-slash-zhong-qi-slash-shui-mian</id>
    <content type="html"><![CDATA[<h3>mac设定定时关机/重启/睡眠，可以用终端命令来解决</h3>

<p>命令的主体主要是 Shutdown，h/r/s 分别代表关机/重启/睡眠，然后在后面加上执行时间(yymmddhhmm)即可。</p>

<!--more-->


<h6>设定2013年11月4日14:10分关机：</h6>

<pre><code>sudo shutdown -h 1311041410
</code></pre>

<p>也可以</p>

<pre><code>sudo shutdown -h 14:10
</code></pre>

<h6>设定2013年11月4日14:10分重启：</h6>

<pre><code>    sudo shutdown -r 1311041410
</code></pre>

<p>也可以</p>

<pre><code>sudo reboot 
</code></pre>

<p>或者</p>

<pre><code>sudo shutdown -r now
</code></pre>

<h6>设定2013年11月4日14:10分睡眠：</h6>

<pre><code>sudo shutdown -s 1311041410
</code></pre>

<h6>如果想要立即关机/重启/睡眠，可以执行命令：</h6>

<pre><code>sudo halt
</code></pre>

<p>或者</p>

<pre><code>sudo shutdown -h now
</code></pre>

<p>now也可以适用于重启和睡眠。</p>

<h3>临时取消定时关机/睡眠/重启的方法也很简单</h3>

<p>我们在终端中执行了关机的命令，终端中会显示如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>swplzj:~ issuser$ sudo shutdown -s 1311041410
</span><span class='line'>Shutdown at Mon Nov  4 14:10:00 2013.
</span><span class='line'>shutdown: [pid 6609]</span></code></pre></td></tr></table></div></figure>


<p>注意上面的 pid 6609，这是指当前运行的这个 shutdown 命令的进程号，如果要取消关机，只需要停止这个进程的运行就可以了。</p>

<p>命令为：</p>

<pre><code>sudo kill 6609
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 计算代码的总行数]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/mac-ji-suan-dai-ma-de-zong-xing-shu/"/>
    <updated>2015-02-13T14:31:37+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/mac-ji-suan-dai-ma-de-zong-xing-shu</id>
    <content type="html"><![CDATA[<p>计算代码的行数</p>

<p>在终端上的命令，作用：找到项目的根目录，可以计算出代码的行数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find . -name "*.m" -or -name "*.h" |xargs grep -v "^$"|wc -l
</span><span class='line'>grep -v "^$"是去掉空行
</span><span class='line'>find . "(" -name "*.m" -or -name "*.strings" -or -name "*.h" ")" -print | xargs wc -l</span></code></pre></td></tr></table></div></figure>


<p>赶快试一试吧，看看你的代码量是多少！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS mac终端下的SQL语句]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-maczhong-duan-xia-de-sqlyu-ju/"/>
    <updated>2015-02-13T14:18:47+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-maczhong-duan-xia-de-sqlyu-ju</id>
    <content type="html"><![CDATA[<p>我们都知道数据库的创建可以借助图形化的数据库工具软件，但也可以在Mac终端下来直接使用代码创建。
下面介绍怎样建立数据库、建立资料表、建立索引、数据的增、删、改、查以及sqlite3命令列选项等。</p>

<!--more-->


<h5>建立数据库档案</h5>

<p>打开终端，在终端用sqlite3建立数据库，在shell下键入（以下$符号为shell提示号，请勿键入）：</p>

<pre><code>$ sqlite3 foo.db
</code></pre>

<p>如果目录下没有foo.db，sqlite3就会建立这个数据库。</p>

<p>sqlite3并没有强制数据库档名要怎么取，因此如果你喜欢，也可以取个例如foo.icannameitwhateverilike的档名。</p>

<p>在sqlite3提示列下操作
进入了sqlite3之后，会看到以下文字：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SQLite version 3.1.3
</span><span class='line'>Enter ".help" for instructions
</span><span class='line'>sqlite&gt; </span></code></pre></td></tr></table></div></figure>


<p></p>

<p>这时如果使用.help可以取得求助，.quit则是离开（请注意：不是quit）</p>

<h5>SQL的指令格式</h5>

<p>所有的SQL指令都是以分号（;）结尾的。如果遇到两个减号（&ndash;）则代表注解，sqlite3会略过去。</p>

<h4>建立资料表</h4>

<p>假设我们要建一个名叫film的资料表，只要键入以下指令就可以了：</p>

<pre><code>create table film(title, length, year, starring);
</code></pre>

<p>这样我们就建立了一个名叫film的资料表，里面有name、length、year、starring四个字段。
这个create table指令的语法为：</p>

<pre><code>create table table_name(field1, field2, field3, ...);
</code></pre>

<p>table_name是资料表的名称，fieldx则是字段的名字。</p>

<p>sqlite3与许多SQL数据库软件不同的是，它不在乎字段属于哪一种资料型态：sqlite3的字段可以储存任何东西：文字、数字、大量文字（blub），它会在适时自动转换。</p>

<h4>建立索引</h4>

<p>如果资料表有相当多的资料，我们便会建立索引来加快速度。好比说：</p>

<pre><code>create index film_title_index on film(title);
</code></pre>

<p>意思是针对film资料表的name字段，建立一个名叫film_name_index的索引。这个指令的语法为</p>

<pre><code>create index index_name on table_name(field_to_be_indexed);
</code></pre>

<p>一旦建立了索引，sqlite3会在针对该字段作查询时，自动使用该索引。这一切的操作都是在幕后自动发生的，无须使用者特别指令。</p>

<h4>增加数据</h4>

<p>接下来我们要插入数据了，加入的方法为使用insert into指令，语法为：</p>

<pre><code>insert into table_name values(data1, data2, data3, ...);
</code></pre>

<p>例如我们可以加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>insert into film values ('Silence of the Lambs, The', 118, 1991, 'Jodie Foster');
</span><span class='line'>insert into film values ('Contact', 153, 1997, 'Jodie Foster');
</span><span class='line'>insert into film values ('Crouching Tiger, Hidden Dragon', 120, 2000, 'Yun-Fat Chow');
</span><span class='line'>insert into film values ('Hours, The', 114, 2002, 'Nicole Kidman');</span></code></pre></td></tr></table></div></figure>


<p>如果该字段没有资料，我们可以填NULL。</p>

<h4>删除数据</h4>

<p>delete from film where year &lt; 1970;
就会删除所有年代早于1970年（不含）的电影了。</p>

<h4>更改数据</h4>

<p>了解select的用法非常重要，因为要在sqlite更改或删除一笔资料，也是靠同样的语法。
例如有一笔资料的名字打错了：</p>

<pre><code>update film set starring='Jodie Foster' where starring='Jodee Foster';
</code></pre>

<p>就会把主角字段里，被打成&#8217;Jodee Foster&#8217;的那笔（或多笔）资料，改回成Jodie Foster。</p>

<h4>查询数据</h4>

<p>讲到这里，我们终于要开始介绍SQL最强大的select指令了。我们首先简单介绍select的基本句型：</p>

<pre><code>select columns from table_name where expression;
</code></pre>

<p>最常见的用法，当然是倒出所有数据库的内容：</p>

<pre><code>select * from film;
</code></pre>

<p>如果资料太多了，我们或许会想限制笔数：</p>

<pre><code>select * from film limit 10;
</code></pre>

<p>或是照着电影年份来排列：</p>

<pre><code>select * from film order by year limit 10;
</code></pre>

<p>或是年份比较近的电影先列出来：</p>

<pre><code>select * from film order by year desc limit 10;
</code></pre>

<p>或是我们只想看电影名称跟年份：</p>

<pre><code>select title, year from film order by year desc limit 10;
</code></pre>

<p>查所有茱蒂佛斯特演过的电影：</p>

<pre><code>select * from film where starring='Jodie Foster';
</code></pre>

<p>查所有演员名字开头叫茱蒂的电影(&lsquo;%&rsquo; 符号便是 SQL 的万用字符）：</p>

<pre><code>select * from film where starring like 'Jodie%';
</code></pre>

<p>查所有演员名字以茱蒂开头、年份晚于1985年、年份晚的优先列出、最多十笔，只列出电影名称和年份：</p>

<pre><code>select title, year from film where starring like 'Jodie%' and year &gt;= 1985 order by year desc limit 10;
</code></pre>

<p>有时候我们只想知道数据库一共有多少笔资料：</p>

<pre><code>select count(*) from film;
</code></pre>

<p>有时候我们只想知道1985年以后的电影有几部：</p>

<pre><code>select count(*) from film where year &gt;= 1985;
</code></pre>

<p>其他sqlite的特别用法</p>

<p>sqlite可以在shell底下直接执行命令：</p>

<pre><code>sqlite3 film.db "select * from film;"
</code></pre>

<p>输出 HTML 表格：</p>

<pre><code>sqlite3 -html film.db "select * from film;"
</code></pre>

<p>将数据库「导出来」：</p>

<pre><code>sqlite3 film.db ".dump" &gt; output.sql
</code></pre>

<p>利用输出的资料，建立一个一模一样的数据库（加上以上指令，就是标准的SQL数据库备份了）：</p>

<pre><code>sqlite3 film.db &lt; output.sql
</code></pre>

<p>在大量插入资料时，你可能会需要先打这个指令：</p>

<pre><code>begin;
</code></pre>

<p>插入完资料后要记得打这个指令，资料才会写进数据库中：</p>

<pre><code>commit;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 教程：浅析Text Kit]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/ios-7-jiao-cheng-:qian-xi-text-kit/"/>
    <updated>2015-02-13T12:00:06+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/ios-7-jiao-cheng-:qian-xi-text-kit</id>
    <content type="html"><![CDATA[<p>Text Kit是iOS 7中引入的一个新功能，非常值得开发者使用，下面先看看本文的目录结构：</p>

<!--more-->


<p><a href="#08">      1. 什么是Text Kit    </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a href="#01">      2. Text Kit架构   </a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a href="#02">      3. Text Kit特点   </a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a href="#03">      4. Text Kit功能概述 </a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a href="#04">      5. Text Kit中重要的一些对象 </a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a href="#05">      6. Text Kit示例   </a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a href="#06">      7. 小结   </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a href="#07">      8. 推荐Text Kit学习资源   </a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>

<p><a name="Text Kit架构" id="08""></a></p>

<h4>什么是Text Kit</h4>

<p>在iOS7中，苹果引入了<code>Text Kit</code>——Text Kit是一个快速而又现代化的文字排版和渲染引擎。Text Kit在UIKit framework中的定义了一些类和相关协议，它最主要的作用就是为程序提供文字排版和渲染的功能。在程序中，通过Text Kit可以对文字进行存储(store)、布局(lay out)，以及用最精细的排版方式(例如文字间距、换行和对齐等)来显示文本内容。
苹果引入Text Kit的目的并非要取代已有的Core Text，Core Text的主要作用也是用于文字的排版和渲染中，它是一种先进而又处于底层技术，如果我们需要将文本内容直接渲染到图形上下文(Graphics context)时，从性能和易用性来考虑，最佳方案就是使用Core Text。而如果我们直接利用苹果提供的一些控件(例如UITextView、UILabel和UITextField等)对文字进行排版，无疑就是借助于UIkit framework中Text Kit提供的API。</p>

<p><a name="Text Kit架构" id="01""></a></p>

<h4>Text Kit架构</h4>

<p>下面，我们通过图1(此图来自WWDC2013 Session 210)来了解一下Text Kit的架构。图1是基于iOS 7绘制的，从图中，我们可以看到Text Kit是基于Core Text构建的，它通过Core Text与Core Graphics进行交互。而UI控件(UILabel、UITextField和UITextView)则构建于Text Kit之上，可见这些文本控件可以利用Text Kit提供的API来对文字进行排版和渲染处理。
从图中我们也可以看到SDK提供的UIWebView是基于WebKit的，它不能使用Text Kit提供的功能。</p>

<p><img src="http://beyondvincent.com/images/2013/11/23.jpg" title="图1 Text Kit在iOS 7 SDK中的位置" alt="id1" /></p>

<p>我们再来看看图1中的相关组件在iOS6里面是如何对应的，如图2所示，可以看出在iOS 6中是没有Text Kit，并且UILabel、UIText和UITextView是基于String Drawing和WebKit构建的。其中String Drawing是与Core Graphics直接通讯。</p>

<p><img src="http://beyondvincent.com/images/2013/11/24.jpg" title="图2 在iOS 6中并没有Text Kit" alt="id2" /></p>

<p><a name="Text Kit特点" id="02"></a></p>

<h4>Text Kit特点</h4>

<p>从上面的介绍中，我们可以了解到Text Kit在UIKit中的作用非常重要。Text Kit在实际开发中具有如下特点：
在UI控件中Text Kit完全掌控着文字的排版和渲染
UITextView、UITextField和UILabel是构建于Text Kit之上的
能够与动画、UICollectionView和UITableView做到无缝集成
Text Kit具有这样一些能力：Subclassing、Delegation和Notifcation。</p>

<p><a name="Text Kit功能概述" id="03"></a></p>

<h4>Text Kit功能概述</h4>

<p>下面我们看看通过Text Kit，都能实现那些功能(这里列出了是一些常用和重要功能)：
对文字进行分页或多列排版
支持文字的换行、折叠和着色等处理
可以调整字与字之间的距离、行间距、文字大小、指定特定的字体
支持富文本编辑，可以自定义文字截断
支持凸版印刷效果(letterpress)
支持数据类型的检测(例如链接、附件等)
如图3，是利用Text Kit对文字做的分页排版</p>

<p><img src="http://beyondvincent.com/images/2013/11/25.jpg" title="图3 利用Text Kit做的分页排版效果" alt="id3" /></p>

<p>再看图4，是利用Text Kit做的换行处理，其中对某个路径范围做了排除。</p>

<p><img src="http://beyondvincent.com/images/2013/11/26.jpg" title="图4 利用Text Kit做的换行处理效果" alt="id4" /></p>

<p>再来看看利用Text Kit做的凸版印刷效果，如图5所示</p>

<p><img src="http://beyondvincent.com/images/2013/11/27.jpg" title="图5 利用Text Kit做的凸版印刷效果" alt="id5" /></p>

<p><a name="Text Kit中重要的一些对象" id="04"></a></p>

<h4>Text Kit中重要的一些对象</h4>

<p>下面我们来看看Text Kit中重要的几个对象。</p>

<p><img src="http://beyondvincent.com/images/2013/11/28.jpg" title="图6 Text Kit中重要的几个对象" alt="id6" /></p>

<p>如图6所示，Text Kit中主要有4个重要的对象。
Text View是用来显示文本内容的控件，主要包括UILabel、UITextView和UITextField。
Text containers对应着NSTextContainer类。NSTextContainer定义了文本可以排版的区域。一般来说，都是矩形区域，当然，也可以根据需求，通过子类化NSTextContainer来创建别的一些形状，例如圆形、不规则的形状等。NSTextContainer不仅可以创建文本可以填充的区域，它还维护着一个数组——该数组定义了一个区域，排版的时候文字不会填充该区域，因此，我们可以在排版文字的时候，填充非文本元素(例如图片，如图4所示)。
Layout manager对应着NSLayoutManager类。该类负责对文字进行编辑排版处理——通过将存储在NSTextStorage中的数据转换为可以在视图控件中显示的文本内容，并把统一的字符编码映射到对应的字形(glyphs)上，然后将字形排版到NSTextContainer定义的区域中。
Text storage对应着NSTextStorage类。该类定义了Text Kit扩展文本处理系统中的基本存储机制。NSTextStorage继承自NSmutableAttributedString，主要用来存储文本的字符和相关属性。另外，当NSTextStorage中的字符或属性发生了改变，会通知NSLayoutManager，进而做到文本内容的显示更新。
通常情况下，NSTextStorage、NSLayoutManager和NSTextContainer是一一对应的。如图7所示关系：</p>

<p><img src="http://beyondvincent.com/images/2013/11/29.jpg" title="图7 普通排版" alt="id7" /></p>

<p>当然，如果需要将文字显示为多列，或多页，可以按照如图8所示关系——使用多个NSTextContainer。</p>

<p><img src="http://beyondvincent.com/images/2013/11/30.jpg" title="图8 多页或者多列排版" alt="id8" /></p>

<p>如果针对不同的排版方式，则可以使用多个NSLayoutManager，如图9所示</p>

<p><img src="http://beyondvincent.com/images/2013/11/31.jpg" title="图9 不同的排版方式" alt="id9" /></p>

<p>如图10所示，通过形象的方式，对UITextView的组成做了分解。通常，我们在设备上只能看到最右边的文本显示界面，而内部的NSTextStorage、NSLayoutManager和NSTextContainer是看不出来的。通常由NSLayoutManager从NSTextStorage中读取出文本数据，然后根据一定的排版方式，将文本排版到NSTextContainer中，再由NSTextContainer结合UITextView将最终效果显示出来。</p>

<p><img src="http://beyondvincent.com/images/2013/11/32.jpg" title="图10 UITextView的分解" alt="id10" /></p>

<p><a name="Text Kit示例", id="05"></a></p>

<h4>Text Kit示例</h4>

<p>前面对Text Kit做了一些介绍，下面我们配合一个例子(图文排版)，来进一步加深对Text Kit的认识。具体实现步骤如下</p>

<ol>
<li>打开Xcode 5，新建一个Single View Application模板的程序，将工程命名为ExclusionPath。</li>
<li>打开Main.storyboard文件，然后再默认View Controller的View里面分别添加一个UITextView和UIImageView。并将这两个控件连接到ViewController.h中(名称分别为textView何imageView)。然后给textView设置一些字符串，imageView设置一个图片。</li>
<li>打开ViewController.m文件，找到viewDidLoad方法，用如下代码替换该方法：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad
</span><span class='line'>{
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    
</span><span class='line'>    //创建一个平移手势对象，该对象可以调用imagePanned：方法
</span><span class='line'>    UIPanGestureRecognizer *panGes = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(imagePanned:)];
</span><span class='line'>    [self.imageView addGestureRecognizer:panGes];
</span><span class='line'>    
</span><span class='line'>    self.textView.textContainer.exclusionPaths = @[[self translatedBezierPath]];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，给imageView添加了一个平移手势。另外通过调用translatedBezierPath方法，给textView的textContainer设置exclusionPaths属性值。表示需要排除的区域（也就是图片在排版中显示的位置）。</p>

<p>下面来看一下translatedBezierPath方法的实现，如下代码所示</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIBezierPath *)translatedBezierPath
</span><span class='line'>{
</span><span class='line'>    CGRect butterflyImageRect = [self.textView convertRect:self.imageView.frame fromView:self.view];
</span><span class='line'>    UIBezierPath *newButterflyPath = [UIBezierPath bezierPathWithRect:butterflyImageRect];
</span><span class='line'>    
</span><span class='line'>    return newButterflyPath;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，利用imageView的frame属性创建了一个UIBezierPath，然后将该值返回。
还记得第3步中创建的平移手势吗。里面有一个action需要实现imagePanned:，下面来看看这个方法的实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)imagePanned:(id)sender
</span><span class='line'>{
</span><span class='line'>    if ([sender isKindOfClass:[UIPanGestureRecognizer class]]) {
</span><span class='line'>        UIPanGestureRecognizer *localSender = sender;
</span><span class='line'>        
</span><span class='line'>        if (localSender.state == UIGestureRecognizerStateBegan) {
</span><span class='line'>            self.gestureStartingPoint = [localSender translationInView:self.textView];
</span><span class='line'>            self.gestureStartingCenter = self.imageView.center;
</span><span class='line'>        } else if (localSender.state == UIGestureRecognizerStateChanged) {
</span><span class='line'>            CGPoint currentPoint = [localSender translationInView:self.textView];
</span><span class='line'>            
</span><span class='line'>            CGFloat distanceX = currentPoint.x - self.gestureStartingPoint.x;
</span><span class='line'>            CGFloat distanceY = currentPoint.y - self.gestureStartingPoint.y;
</span><span class='line'>            
</span><span class='line'>            CGPoint newCenter = self.gestureStartingCenter;
</span><span class='line'>            
</span><span class='line'>            newCenter.x += distanceX;
</span><span class='line'>            newCenter.y += distanceY;
</span><span class='line'>            
</span><span class='line'>            self.imageView.center = newCenter;
</span><span class='line'>            
</span><span class='line'>            self.textView.textContainer.exclusionPaths = @[[self translatedBezierPath]];
</span><span class='line'>        } else if (localSender.state == UIGestureRecognizerStateEnded) {
</span><span class='line'>            self.gestureStartingPoint = CGPointZero;
</span><span class='line'>            self.gestureStartingCenter = CGPointZero;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中首先根据平移的距离来设置imageView的位置，然后利用translatedBezierPath方法重新计算了一下排除区域。</p>

<p>至此代码编写完毕，下面来运行程序，看看实际效果。如图11所示：</p>

<p><img src="http://beyondvincent.com/images/2013/11/33.gif" title="图11 运行效果" alt="id11" /></p>

<p><a name="小结" id="06"></a></p>

<h4>小结</h4>

<p>实际上，上面的示例，只是揭秘了Text Kit功能的冰山一角。从iOS7及以后的版本中，Text Kit在UIKit framework里面占据重要的地位，Text Kit在文字处理方面，具有非常强大的功能，并且开发者可以对Text Kit进行定制和扩展。据悉，苹果利用了2年的时间来开发Text Kit，相信这对许多开发者来说都是福音。</p>

<p><a name="推荐Text Kit学习资源" id="07"></a></p>

<h4>推荐Text Kit学习资源</h4>

<p>更多关于Text Kit的学习资料，请参考下面的内容：
wwdc视频:</p>

<ul>
<li><a href="https://developer.apple.com/videos/wwdc/2013/?include=210">Introducing Text Kit</a></li>
<li><a href="https://developer.apple.com/videos/wwdc/2013/?include=220">Advanced Text Layouts and Effects with Text Kit</a></li>
<li><a href="https://developer.apple.com/videos/wwdc/2013/?include=223">Using Fonts with Text Kit</a></li>
</ul>


<p>苹果官方参考文档：</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/TextAndWebiPhoneOS.pdf">Text Programming Guide for iOS.pdf</a></li>
<li>NSLayoutManager Class Reference for iOS.pdf</li>
<li>NSLayoutManagerDelegate Protocol Reference for iOS.pdf</li>
<li>NSTextContainer Class Reference for iOS.pdf</li>
<li>NSTextStorage Class Reference for iOS.pdf</li>
<li>NSTextStorageDelegate Protocol Reference for iOS.pdf</li>
</ul>


<p>苹果官方示例：</p>

<ul>
<li>IntroToTextKit</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 5中的Interface Builder更有利于团队协作开发]]></title>
    <link href="http://swplzj.github.io/blog/2015/02/13/xcode-5zhong-de-interface-buildergeng-you-li-yu-tuan-dui-xie-zuo-kai-fa/"/>
    <updated>2015-02-13T11:30:59+08:00</updated>
    <id>http://swplzj.github.io/blog/2015/02/13/xcode-5zhong-de-interface-buildergeng-you-li-yu-tuan-dui-xie-zuo-kai-fa</id>
    <content type="html"><![CDATA[<h4>小引</h4>

<p>在iOS开发中，开发者有各种理由选择用代码来构建界面，其中最多的理由就是Interface Builder绘制的代码不利于团队间协作(代码的可读性和合并)。虽然Interface Builder来绘制界面有诸多优势，但是由于致命的缺陷，许多开发团队不得不远离它，当然也有一些开发团队为了在协同开发时也使用IB来绘制界面，他们尽量确保同一时期只由一个人来操作某个xib文件，以此避免提交代码的时候需要合并xib文件。然而，在Xcode 5中，苹果的开发团队已经对xib文件格式做了大量的简化工作。本文就来简要的看看相关内容。</p>

<!--more-->


<p>注：本文译自<a href="http://nilsou.com/blog/2013/08/07/xcode-5-finally-makes-interface-builder-a-viable-option-for-teams/">Xcode 5 Finally Makes Interface Builder a Viable Option for Teams</a></p>

<h4>目录</h4>

<ul>
<li>Xcode 4中xib文件的格式</li>
<li>Xcode 5中xib文件的格式</li>
<li>小结</li>
</ul>


<p>上周我将代码merge到我的working branch时，注意到以前没曾见过的提示：</p>

<p><img src="http://beyondvincent.com/images/2013/09/1.png" alt="id1" /></p>

<p>Git会自动合并xib文件！我在想，Xcode 5中肯定对xib文件的格式做了修改，所以我准备深入研究一下。
原来由Xcode 5生成的xib文件是一种全新的格式。看起来苹果这次对xib文件格式的变更将有助于开发团队开始考虑使用IB来绘制界面。</p>

<h5>* Xcode 4中xib文件的格式</h5>

<p>为了演示xib文件格式在Xcode 4和Xcode 5中的差异，我首先在Xcode 4中创建了一个新的xib文件，并添加了一些view进去：一个UIScrollView，该scrollview中包含一些UIButton、UILable和TextView等。</p>

<p><img src="http://beyondvincent.com/images/2013/09/2.png" title="xib" alt="id2" /></p>

<p>然后我在工程导航窗口中右键单击该文件，并选择<code>Open As &gt; Source Code</code>。下面的链接中是看到的内容：
<a href="https://gist.github.com/nilsou/6057457">Xcode 4生成的.xib文件</a>(需要点击“File suppressed. Click to show.”)</p>

<p>可以看到，这么简单的一个view居然有1108行代码！这太多了。</p>

<p>对开发者来说它的可读性非常的糟糕。这是开发者为什么不喜欢xib文件的主要原因(由此放弃使用interface builder)。</p>

<p>更糟糕的是这个xib文件的格式还具有不确定性。也就是说如果我在Interface Builder创建相同的UI界面，但是我们看到的文件内容并不是相同的。这就导致xib文件的合并非常的困难，甚至不可能进行合并。这事开发者不使用xib文件的另外一个重要原因。</p>

<h5>* Xcode 5中xib文件的格式</h5>

<p>接着，我在Xcode 5中打开同一个工程。当在Xcode 5中打开用Xcode 4创建的xib文件时，会提示将文件升级到新的格式。这里需要注意的是升级之后的文件只能在Xcode 5中打开，这种新格式的文件不能在老版本中的Xcode中打开。所以，如果是团队协作开发，那么升级的时候，需要确保所有的开发者都使用Xcode 5。</p>

<p><img src="http://beyondvincent.com/images/2013/09/3.png" alt="id3" /></p>

<p>我点击Upgrade，然后再次打开xib文件的source code，看看有什么变化。如下链接中所示：</p>

<p><a href="https://gist.github.com/nilsou/6057474">Xcode 5生成的.xib文件</a>(需要点击“File suppressed. Click to show.”)</p>

<p><code>133行</code>！这与Xcode 4中创建的xib文件相差约10倍。可见苹果的开发团队已经对xib文件格式做了大量的简化。</p>

<p>再看看里面的具体内容，可以看出它的可读性也加强了。xib文件中的源代码现在也能够反应出view的层次(Interface Builder左边看到的内容结构！)，等熟悉之后，开发者可以直接对这个xml代码进行编写。
最重要的一点，可以看出Xcode 5生成的xib文件内容源码位置是确定的。这非常利于文件的合并。</p>

<h4>小结</h4>

<p>这种新的格式带来的最大好处不仅仅是增强开发者对xib文件的可读性，另外在大多数情况下，git还可以对xib文件进行自动合并，不用开发者手动进行。</p>

<p>现在如果还有开发者告诉你他不想用xib文件，那么请把这篇文章发给他看看吧，我相信已经没有太多理由不使用xib文件了。</p>

<p>其实在Xcode 5中不仅对Interface Builder进行了改善，还有其它一些功能也做了改进，例如自动布局约束的设置已经没有以前痛苦了。</p>
]]></content>
  </entry>
  
</feed>
